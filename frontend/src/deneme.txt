
backend projesini kaldırma:
     dotnet build -> dotnet run


npm install @mantine/core @mantine/hook 

tailwindcss -> 
    npm install -D tailwindcss@3.4.17 (sürüm uyuşmazlığı için)
    npx tailwindcss init (tailwind.config.js dosyasını oluşturmak için)


git pull origin main -> değişiklikleri repository'den çeker

git add . -> projedeki değişiklerin tümününü ekler
git commit -m "message" -> commit mesajı (sürüm)
git push origin main -> commit'i repository'e ekler



PROJE EKLEME EKRANI
proje (string max 250 karakter)
süreç (string combobox)
görev (string textbox max 250 karakter)
kullanıcı (kullanıcılar combobox)
başlama bitiş tarihleri (date,date)
son değiştiren kullanıcı (giriş yapan kişinin bilgileri)
son değiştirme tarih ve saaat (yapılan işlem tarihi)
durum (combobox) (içerisinde yapılacak devam ediyor bitti iptal) 
önem sırası (öncelik düşük orta yüksek kritik)

PROJE DETAY SAYFASI
proje adı
süreç
görev
kullanıcı bilgisi
öncelik durumu
durum
başlama ve bitiş tarihi
proje detay açıklaması (string max 500)
dosya ekleme


PROJE EKRANLARI
    -> Proje ekleme ekranı (Projects ve ProjectTasks tablosuna aynı anda post atacak)
    -> Proje Listeleme (Eklenen Projeler Görüntülenecek, tüm alanlar görüntülenmeyecek, proje detay butonu olacak
    butona tıklandığında proje detay sayfası açılacak)
    -> Proje Detay (Proje ekleme ekranında girilen tüm bilgiler görüntülenecek)



dashboarda görüntülenecekler:
projelerin durumları -> biten devam eden başlanılacaklar(opsiyonel)


Proje ekleme sayfası
-Proje adresi -> il ilçe mahalle ada parsel
-(Panel sayısı * panel gücü) / 1000  = kWp
-Adres: Şehir, ilçe, mahalle, ada parsel (çoklu seçim),

Process seçme ekranı
-tasklar değil süreçler bir kullanıcıya atanacak(tüm görevleri bir kişi kontrol edecek)

Task ekranı
-task ekranında tüm bilgiler aynı ekranda görünecek (modal şeklinde değil)

dashboard
-raporlamalar görüntülenecek
-hangi projenin hangi süreci yüzde kaç tamamlandı grafiği
-toplam yapılan projelerin güçleri
-yönetici bazlı raporlar oluşturma 
------------------------------------------------------------------------------------------------------------------------------
Proje Kart
-Proje adı
-açıklaması
-başlama bitiş tarihi
-durumu
-DC ve AC değeri (DC gücü formül ile hesaplanacak-> (Panel sayısı * panel gücü) / 1000  = kWp ) (değiştirilemez olacak)
-panel gücü ve sayısı
-invörter sayı ve güç.
-proje lokasyon il/ilçe
-Ek yapı varsa DC değeri gösterilecek
-proje tadilat veya DC güç artışı ise sağ üst köşede gösterilir.

PROJE EKLE
-DC VE AC DEĞERLERİ
-İL İLÇE MAHALLE ADA PARSEL
-PROJE TÜRÜ


<TextInput label="Proje Adı" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.currentTarget.value })} />
      <Textarea label="Açıklama" value={formData.description} onChange={(e) => setFormData({ ...formData, description: e.currentTarget.value })} />
      <div className="grid grid-cols-2 gap-4">
        <input type="date" value={formData.startDate.split("T")[0]} onChange={(e) => setFormData({ ...formData, startDate: e.target.value })} />
        <input type="date" value={formData.endDate.split("T")[0]} onChange={(e) => setFormData({ ...formData, endDate: e.target.value })} />
      </div>
      <Select label="Durum" data={[{ value: "isPlanned", label: "Planlanıyor" }, { value: "ToDo", label: "Yapılıyor" }, { value: "Done", label: "Tamamlandı" }, { value: "Canceled", label: "İptal" }]} value={formData.status} onChange={(e) => setFormData({ ...formData, status: e })} />
      <Select label="Önem" data={[{ value: "Low", label: "Düşük" }, { value: "Medium", label: "Orta" }, { value: "High", label: "Yüksek" }, { value: "Critical", label: "Kritik" }]} value={formData.priority} onChange={(e) => setFormData({ ...formData, priority: e })} />
      <Select label="Proje Türü" data={projectTypes} value={formData.projectTypeId.toString()} onChange={(e) => setFormData({ ...formData, projectTypeId: Number(e) })} />
      <Select label="Şehir" data={cities} value={formData.address.cityId.toString()} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, cityId: Number(e), districtId: 0, neighborhoodId: 0 } })} />
      <Select label="İlçe" data={districts} value={formData.address.districtId.toString()} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, districtId: Number(e), neighborhoodId: 0 } })} />
      <Select label="Mahalle" data={neighborhood} value={formData.address.neighborhoodId.toString()} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, neighborhoodId: Number(e) } })} />
      <TextInput label="Ada" value={formData.address.ada} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, ada: e.currentTarget.value } })} />
      <TextInput label="Parsel" value={formData.address.parsel} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, parsel: e.currentTarget.value } })} />
      <TextInput label="Panel Sayısı" value={formData.panelCount} onChange={(e) => setFormData({ ...formData, panelCount: e.currentTarget.value })} />
      <TextInput label="Panel Gücü" value={formData.panelPower} onChange={(e) => setFormData({ ...formData, panelPower: e.currentTarget.value })} />
      <Select label="Panel Markası" data={panelBrand} value={formData.panelBrandId.toString()} onChange={(e) => setFormData({ ...formData, panelBrandId: Number(e) })} />
      <TextInput label="DC (kWp)" value={formData.dcValue} readOnly />
      <TextInput label="İnverter Sayısı" value={formData.inverterCount} onChange={(e) => setFormData({ ...formData, inverterCount: e.currentTarget.value })} />
      <TextInput label="İnverter Gücü" value={formData.inverterPower} onChange={(e) => setFormData({ ...formData, inverterPower: e.currentTarget.value })} />
      <Select label="İnverter Markası" data={inverterBrand} value={formData.inverterBrandId.toString()} onChange={(e) => setFormData({ ...formData, inverterBrandId: Number(e) })} />
      <TextInput label="AC (kWe)" value={formData.acValue} onChange={(e) => setFormData({ ...formData, acValue: e.currentTarget.value })} />

      <Checkbox label="Ek Yapı mı?" checked={hasEkYapi} onChange={(e) => {
        const checked = e.currentTarget.checked;
        setHasEkYapi(checked);
        setFormData({ ...formData, hasAdditionalStructure: checked });
      }} />

      {hasEkYapi && (
        <div className="grid grid-cols-3 gap-4">
          <TextInput label="Ek Panel Sayısı" value={formData.additionalPanelCount} onChange={(e) => setFormData({ ...formData, additionalPanelCount: Number(e.currentTarget.value) })} />
          <TextInput label="Ek Panel Gücü" value={formData.additionalPanelPower} onChange={(e) => setFormData({ ...formData, additionalPanelPower: Number(e.currentTarget.value) })} />
          <TextInput label="Ek İnverter Sayısı" value={formData.additionalInverterCount} onChange={(e) => setFormData({ ...formData, additionalInverterCount: Number(e.currentTarget.value) })} />
        </div>
      )}

      <Button className="bg-green-500" onClick={handleSubmit}>Projeyi Kaydet</Button>
    </div>

    ---------------------------------------------------------

    const [hasEkYapi, setHasEkYapi] = useState(false);
  const [cities, setCities] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [neighborhood, setNeighborhood] = useState([]);
  const [projectTypes,setProjectTypes] = useState([]);
  const [panelBrand,setPanelBrand] = useState([]);
  const [inverterBrand,setInverterBrand] = useState([]);


  const [formData, setFormData] = useState({
  name: "",
  description: "",
  startDate: new Date().toISOString().split("T")[0], // 🟢 bugünün tarihi
  endDate: "",
  priority: "Low",
  status: "isPlanned", // 🟢 varsayılan durum
  panelCount: 0,
  panelPower: 0,
  panelBrandId: 1, // 🟢 varsayılan panel markası
  inverterCount: 0,
  inverterPower: 0,
  inverterBrandId: 1, // 🟢 varsayılan inverter markası
  hasAdditionalStructure: true,
  additionalPanelCount: 0,
  additionalInverterCount: 0,
  acValue: 0,
  dcValue: 0,
  cityId: null,
  districtId: null,
  neighborhoodId: null,
  ada: "0",
  parsel: "0",
  projectTypeId: 1, // 🟢 varsayılan proje türü
  createdAt: new Date().toISOString(),
  createdByUserId: 1,
  updatedAt: null,
  updatedByUserId: 0
});


  // proje türlerini getirme
  useEffect(() => {
    const fetchProjectTypes = async () => {
      try{
        const token = localStorage.getItem("token");
        const response = await axios.get("http://localhost:5000/api/projectTypes", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        const projectTypesOptions = response.data.map((types) => ({
          value: types.id.toString(),
          label: types.name,
        }));

        setProjectTypes(projectTypesOptions);
      }catch(error){
        console.error("Proje Türü Verileri alınmadı: ", error );
      }
    };

    fetchProjectTypes();
  },[])

   // panel markaları getirme
  useEffect(() => {
    const fetchPanelBrand = async () => {
      try{
        const token = localStorage.getItem("token");
        const response = await axios.get("http://localhost:5000/api/panelBrands", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        const panelBrandsOptions = response.data.map((panel) => ({
          value: panel.id.toString(),
          label: panel.name,
        }));

        setPanelBrand(panelBrandsOptions);
      }catch(error){
        console.error("Proje Türü Verileri alınmadı: ", error );
      }
    };

    fetchPanelBrand();
  },[])

  // panel markaları getirme
  useEffect(() => {
    const fetchInverterBrand = async () => {
      try{
        const token = localStorage.getItem("token");
        const response = await axios.get("http://localhost:5000/api/InverterBrands", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        const inverterBrandsOptions = response.data.map((inverter) => ({
          value: inverter.id.toString(),
          label: inverter.name,
        }));

        setInverterBrand(inverterBrandsOptions);
      }catch(error){
        console.error("Proje Türü Verileri alınmadı: ", error );
      }
    };

    fetchInverterBrand();
  },[])


  // şehirleri getirme
  useEffect(() => {
    const fetchCities = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get("http://localhost:5000/api/cities", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        const cityOptions = response.data.map((city) => ({
          value: city.id.toString(), // Mantine Select için string olmalı
          label: city.name,
        }));

        setCities(cityOptions);
      } catch (error) {
        console.error("Şehir verileri alınamadı:", error);
      }
    };
    fetchCities();
  }, []);

  // şehire göre ilçeleri getir
  useEffect(() => {
    const fetchDistricts = async () => {
      if (!formData.cityId) return;

      try {
        const token = localStorage.getItem("token");
        const response = await axios.get(`http://localhost:5000/api/cities/by-districts/${formData.cityId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        const districtOptions = response.data.map((district) => ({
          value: district.id.toString(),
          label: district.name,
        }));

        setDistricts(districtOptions);
      } catch (error) {
        console.error("İlçe verileri alınamadı:", error);
      }
    };

    fetchDistricts();
  }, [formData.cityId]);

  //ilçeye göre mahalle getirme
  useEffect(() => {
    const fetchNeighborhoods = async () => {
      if (!formData.districtId) return;
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get(`http://localhost:5000/api/districts/by-neighborhoods/${formData.districtId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        const neighborhoodsOptions = response.data.map((neighborhood) => ({
          value: neighborhood.id.toString(),
          label: neighborhood.name,
        }));

        setNeighborhood(neighborhoodsOptions);
      } catch (error) {
        console.error("Mahalle verileri alınmadı: ", error);
      }
    };

    fetchNeighborhoods();
  }, [formData.districtId]);

  // dc değeri hesaplama
  useEffect(() => {
  const count = parseFloat(formData.panelCount) || 0;
  const power = parseFloat(formData.panelPower) || 0;
  const dc = (count * power) / 1000;
  setFormData((prev) => ({ ...prev, dcValue: dc.toFixed(2) }));
}, [formData.panelCount, formData.panelPower]);





import React, { useEffect, useState } from "react";
import axios from "axios";
import { Text, Badge, Card, Group, Stack, Divider, LoadingOverlay, ActionIcon, Tooltip } from "@mantine/core";
import { IconCalendar, IconMapPin, IconBolt, IconSolarPanel, IconCpu, IconPlus, IconInfoCircle } from "@tabler/icons-react";
import ProjectDetails from "./ProjectDetails";
import ProjectFilters from "../components/Project/ProjectFilters";
import { useNavigate } from "react-router-dom";

const Projects = () => {
  const [projects, setProjects] = useState([]);
  const [cities, setCities] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [projectTypes, setProjectTypes] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortField, setSortField] = useState("startDate");
  const [sortOrder, setSortOrder] = useState("asc");
  const [selectedProjectId, setSelectedProjectId] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");

    const fetchAll = async () => {
      try {
        setLoading(true);
        const [projectRes, cityRes, districtRes, typeRes] = await Promise.all([
          axios.get("http://localhost:5000/api/projects", { headers: { Authorization: `Bearer ${token}` } }),
          axios.get("http://localhost:5000/api/cities", { headers: { Authorization: `Bearer ${token}` } }),
          axios.get("http://localhost:5000/api/districts", { headers: { Authorization: `Bearer ${token}` } }),
          axios.get("http://localhost:5000/api/projectTypes", { headers: { Authorization: `Bearer ${token}` } }),
        ]);

        setProjects(projectRes.data);
        setCities(cityRes.data);
        setDistricts(districtRes.data);
        setProjectTypes(typeRes.data);
      } catch (err) {
        console.error("Veriler alınamadı:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchAll();
  }, []);

  const formatDate = (dateStr) => {
    if (!dateStr) return "-";
    const date = new Date(dateStr);
    return date.toLocaleDateString("tr-TR");
  };

  const getCityName = (id) => cities.find((c) => c.id === id)?.name || `Şehir ID: ${id}`;
  const getDistrictName = (id) => districts.find((d) => d.id === id)?.name || `İlçe ID: ${id}`;
  const getProjectTypeName = (id) => projectTypes.find((p) => p.id === id)?.name || `Tür ID: ${id}`;

  const priorityConfig = {
    Low: { color: "blue", label: "Düşük" },
    Medium: { color: "green", label: "Orta" },
    High: { color: "orange", label: "Yüksek" },
    Critical: { color: "red", label: "Kritik" },
  };

  const statusConfig = {
    "Active": { color: "blue", label: "Planlama" },
    "Passive": { color: "yellow", label: "Devam Ediyor" },
    "Completed": { color: "green", label: "Tamamlandı" },
    "Cancelled": { color: "red", label: "İptal Edildi" },
  };

  const priorityOrderMap = {
    Low: 1,
    Medium: 2,
    High: 3,
    Critical: 4,
  };

  const filteredProjects = projects
    .filter((project) => {
      const valuesToSearch = [
        project.name,
        project.description,
        project.startDate,
        project.endDate,
        project.priority,
        project.status,
      ];
      return valuesToSearch.some((field) =>
        field?.toString().toLowerCase().includes(searchTerm.toLowerCase())
      );
    })
    .sort((a, b) => {
      let aVal, bVal;
      if (sortField === "priority") {
        aVal = priorityOrderMap[a.priority] || 0;
        bVal = priorityOrderMap[b.priority] || 0;
      } else {
        aVal = new Date(a[sortField]);
        bVal = new Date(b[sortField]);
      }
      return sortOrder === "asc" ? aVal - bVal : bVal - aVal;
    });

  const handleCardClick = (projectId) => {
    setSelectedProjectId(projectId);
    setModalOpen(true);
  };

  const InfoItem = ({ icon: Icon, label, value, color = "gray" }) => (
    <Group gap="xs" wrap="nowrap">
      <Icon size={16} color={color} />
      <Stack gap={0}>
        <Text size="xs" c="dimmed" fw={500}>
          {label}
        </Text>
        <Text size="sm" fw={600}>
          {value}
        </Text>
      </Stack>
    </Group>
  );

  const PowerCard = ({ title, value, unit, icon: Icon }) => (
    <Card withBorder padding="sm" radius="md" bg="gray.0">
      <Group gap="xs" justify="space-between">
        <Stack gap={0}>
          <Text size="xs" c="dimmed" fw={500}>
            {title}
          </Text>
          <Group gap="xs">
            <Text size="lg" fw={700} c="dark">
              {value || 0}
            </Text>
            <Text size="sm" c="dimmed">
              {unit}
            </Text>
          </Group>
        </Stack>
        <Icon size={24} color="var(--mantine-color-blue-6)" />
      </Group>
    </Card>
  );

  if (loading) {
    return (
      <div className="p-4 sm:p-6 relative min-h-96">
        <LoadingOverlay visible={loading} />
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-6">
      <ProjectFilters
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
        sortField={sortField}
        onSortFieldChange={setSortField}
        sortOrder={sortOrder}
        onSortOrderChange={setSortOrder}
      />

      <div className="flex justify-between items-center my-6">
        <div>
          <Text size="xl" fw={700} c="dark">
            Projeler
          </Text>
          <Text size="sm" c="dimmed">
            {filteredProjects.length} proje bulundu
          </Text>
        </div>
        <button
          onClick={() => navigate("/projectCreated")}
          className="bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 rounded-lg shadow-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center gap-2 font-semibold"
        >
          <IconPlus size={20} />
          Yeni Proje Ekle
        </button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6">
        {filteredProjects.length === 0 ? (
          <div className="col-span-full text-center py-12">
            <Text size="lg" c="dimmed">
              Arama sonucu bulunamadı.
            </Text>
          </div>
        ) : (
          filteredProjects.map((project) => (
            <Card
              key={project.id}
              onClick={() => handleCardClick(project.id)}
              className="cursor-pointer transition-all duration-200 hover:shadow-xl hover:scale-[1.02] border border-gray-200"
              withBorder
              shadow="sm"
              radius="lg"
              padding="lg"
            >
              <Card.Section withBorder inheritPadding py="sm">
                <Group justify="space-between" align="flex-start">
                  <Stack gap="xs" style={{ flex: 1 }}>
                    <Text size="lg" fw={700} c="dark" lineClamp={1}>
                      {project.name}
                    </Text>
                    <Text size="sm" c="dimmed" lineClamp={2}>
                      {project.description || "Açıklama yok"}
                    </Text>
                    <InfoItem
                      icon={IconInfoCircle}
                      value={getProjectTypeName(project.projectTypeId)}
                      color="indigo"
                    />
                  </Stack>
                  <Tooltip label="Detayları görüntüle">
                    <ActionIcon variant="light" color="blue" size="sm">
                      <IconInfoCircle size={16} />
                    </ActionIcon>
                  </Tooltip>
                </Group>
              </Card.Section>
              

              <Stack gap="md" mt="md">
                {/* Durum ve Öncelik */}
                <Group justify="space-between">
                  <Badge
                    color={statusConfig[project.status]?.color || "gray"}
                    variant="light"
                    size="sm"
                  >
                    {statusConfig[project.status]?.label || project.status || "Belirsiz"}
                  </Badge>
                  <Badge
                    color={priorityConfig[project.priority]?.color || "gray"}
                    variant="filled"
                    size="sm"
                  >
                    {priorityConfig[project.priority]?.label || project.priority || "-"}
                  </Badge>
                </Group>

                {/* Tarih Bilgileri */}
                <Group grow>
                  <InfoItem
                    icon={IconCalendar}
                    label="Başlama"
                    value={formatDate(project.startDate)}
                    color="green"
                  />
                  <InfoItem
                    icon={IconCalendar}
                    label="Bitiş"
                    value={formatDate(project.endDate)}
                    color="red"
                  />
                </Group>

                {/* Güç Bilgileri */}
                <Group grow>
                  <PowerCard
                    title="DC Gücü"
                    value={project.dcValue}
                    unit="kWp"
                    icon={IconBolt}
                  />
                  <PowerCard
                    title="AC Gücü"
                    value={project.acValue}
                    unit="kWe"
                    icon={IconBolt}
                  />
                </Group>

                {/* Panel ve İnverter */}
                <Group grow>
                  <InfoItem
                    icon={IconSolarPanel}
                    label="Panel"
                    value={`${project.panelCount} adet / ${project.panelPower} W`}
                    color="orange"
                  />
                  <InfoItem
                    icon={IconCpu}
                    label="İnverter"
                    value={`${project.inverterCount} adet / ${project.inverterPower} kW`}
                    color="purple"
                  />
                </Group>

                {/* Ek Yapı */}
                {project.hasAdditionalStructure && (
                  <Card withBorder padding="sm" radius="md" bg="blue.0">
                    <Text size="xs" fw={600} c="blue" mb="xs">
                      EK YAPI BİLGİLERİ
                    </Text>
                    <Group grow>
                      <InfoItem
                        icon={IconSolarPanel}
                        label="Panel"
                        value={`${project.additionalPanelCount} / ${project.additionalPanelPower} W`}
                        color="blue"
                      />
                      <InfoItem
                        icon={IconCpu}
                        label="İnverter"
                        value={`${project.additionalInverterCount} adet`}
                        color="blue"
                      />
                    </Group>
                    <InfoItem
                      icon={IconBolt}
                      label="DC Gücü"
                      value={`${project.additionalDcValue || "-"} kW`}
                      color="blue"
                    />
                  </Card>
                )}

                <Divider />

                {/* Lokasyon ve Proje Türü */}
                <Stack gap="xs">
                  <InfoItem
                    icon={IconMapPin}
                    label="Lokasyon"
                    value={`${getCityName(project.address?.cityId)} / ${getDistrictName(project.address?.districtId)}`}
                    color="teal"
                  />
                  <Group grow>
                    <InfoItem
                      icon={IconMapPin}
                      label="Ada / Parsel"
                      value={`${project.address?.ada || "-"} / ${project.address?.parsel || "-"}`}
                      color="gray"
                    />
                    
                  </Group>
                </Stack>

                {/* Oluşturulma Tarihi */}
                <Text size="xs" c="dimmed" ta="right" fs="italic">
                  Eklendi: {formatDate(project.createdAt)}
                </Text>
              </Stack>
            </Card>
          ))
        )}
      </div>

      <ProjectDetails
        opened={modalOpen}
        onClose={() => setModalOpen(false)}
        projectId={selectedProjectId}
      />
    </div>
  );
};

export default Projects;


// proje ekleme

import { Button, Checkbox, Divider, Select, Textarea, TextInput } from '@mantine/core';
import React, { useEffect, useState } from 'react';
import 'dayjs/locale/tr';
import axios from 'axios';


const ProjectCreate = () => {
  const [hasEkYapi, setHasEkYapi] = useState(false);
  const [cities, setCities] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [neighborhood, setNeighborhood] = useState([]);
  const [projectTypes, setProjectTypes] = useState([]);
  const [panelBrand, setPanelBrand] = useState([]);
  const [inverterBrand, setInverterBrand] = useState([]);

  const [formData, setFormData] = useState({
    name: "",
    description: "",
    startDate: new Date().toISOString(),
    endDate: new Date().toISOString(),
    priority: "Low",
    status: "isPlanned",
    panelCount: 0,
    panelPower: 0,
    panelBrandId: 0,
    inverterCount: 0,
    inverterPower: 0,
    inverterBrandId: 0,
    hasAdditionalStructure: false,
    additionalPanelCount: 0,
    additionalPanelPower: 0,
    additionalInverterCount: 0,
    acValue: 0,
    dcValue: 0,
    createdByUserId: 1,
    projectTypeId: 1,
    address: {
      cityId: 0,
      districtId: 0,
      neighborhoodId: 0,
      ada: "",
      parsel: ""
    }
  });

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem("token");
      const headers = { Authorization: `Bearer ${token}` };

      try {
        const [projectTypesRes, panelRes, inverterRes, citiesRes] = await Promise.all([
          axios.get("http://localhost:5000/api/projectTypes", { headers }),
          axios.get("http://localhost:5000/api/panelBrands", { headers }),
          axios.get("http://localhost:5000/api/inverterBrands", { headers }),
          axios.get("http://localhost:5000/api/cities", { headers })
        ]);

        setProjectTypes(projectTypesRes.data.map(i => ({ value: i.id.toString(), label: i.name })));
        setPanelBrand(panelRes.data.map(i => ({ value: i.id.toString(), label: i.name })));
        setInverterBrand(inverterRes.data.map(i => ({ value: i.id.toString(), label: i.name })));
        setCities(citiesRes.data.map(i => ({ value: i.id.toString(), label: i.name })));

      } catch (err) {
        console.error("Veriler alınamadı", err);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (!formData.address.cityId) return;
    const token = localStorage.getItem("token");
    axios.get(`http://localhost:5000/api/cities/by-districts/${formData.address.cityId}`, {
      headers: { Authorization: `Bearer ${token}` },
    }).then(res => {
      setDistricts(res.data.map(i => ({ value: i.id.toString(), label: i.name })));
    }).catch(console.error);
  }, [formData.address.cityId]);

  useEffect(() => {
    if (!formData.address.districtId) return;
    const token = localStorage.getItem("token");
    axios.get(`http://localhost:5000/api/districts/by-neighborhoods/${formData.address.districtId}`, {
      headers: { Authorization: `Bearer ${token}` },
    }).then(res => {
      setNeighborhood(res.data.map(i => ({ value: i.id.toString(), label: i.name })));
    }).catch(console.error);
  }, [formData.address.districtId]);

  useEffect(() => {
    const count = parseFloat(formData.panelCount) || 0;
    const power = parseFloat(formData.panelPower) || 0;
    const dc = (count * power) / 1000;
    setFormData((prev) => ({ ...prev, dcValue: dc.toFixed(2) }));
  }, [formData.panelCount, formData.panelPower]);

  const handleSubmit = async () => {
    try {
      const token = localStorage.getItem("token");
      await axios.post("http://localhost:5000/api/projects", formData, {
        headers: { Authorization: `Bearer ${token}` },
      });
      alert("Proje başarıyla kaydedildi");
    } catch (err) {
      console.error("Proje kaydı başarısız:", err);
      alert("Hata oluştu");
    }
  };



  return (
    <div className="py-6 px-6">
      <h2 className="text-2xl font-bold  mb-6 text-ivosis-700">Proje Ekle</h2>
      <div className="border rounded-lg p-6 bg-white space-y-8 ">

        {/* GENEL BİLGİLER */}
        <div>
          <h6 className="text-lg font-bold text-ivosis-700 mb-4">Genel Bilgiler</h6>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

            {/* Sol Sütun - Proje Adı ve Açıklama */}
            <div className="space-y-6">
              {/* Proje Adı */}
              <div>
                <label className="text-natural-800 font-semibold block mb-1">
                  Proje Adı <span className="text-red-500">*</span>
                </label>
                <TextInput
                  className="w-full"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.currentTarget.value })}
                />
              </div>

              {/* Açıklama */}
              <div>
                <label className="text-natural-800 font-semibold block mb-1">
                  Açıklama
                </label>
                <Textarea
                  placeholder="Açıklama yazın"
                  rows={2}
                  className="w-full h-full"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.currentTarget.value })}
                />
              </div>
            </div>

            {/* Sağ Sütun - Diğer Bilgiler */}
            <div className="space-y-6">

              {/* Tarihler */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="text-natural-800 font-semibold block mb-1">
                    Başlangıç Tarihi <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="date"
                    className="border rounded-md px-3 py-2 w-full"
                    value={formData.startDate.split("T")[0]}
                    onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}
                  />
                </div>

                <div>
                  <label className="text-natural-800 font-semibold block mb-1">
                    Bitiş Tarihi <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="date"
                    className="border rounded-md px-3 py-2 w-full"
                    value={formData.endDate.split("T")[0]}
                    onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}
                  />
                </div>
              </div>

              {/* Durum - Önem - Proje Türü */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="text-natural-800 font-semibold block mb-1">
                    Durum <span className="text-red-500">*</span>
                  </label>
                  <Select
                    placeholder="Durum Seçin"
                    searchable
                    clearable
                    className="w-full"
                    data={[
                      { value: "isPlanned", label: "Planlanıyor" },
                      { value: "ToDo", label: "Yapılıyor" },
                      { value: "Done", label: "Tamamlandı" },
                      { value: "Canceled", label: "İptal" }
                    ]}
                    value={formData.status}
                    onChange={(e) => setFormData({ ...formData, status: e })}
                  />
                </div>

                <div>
                  <label className="text-natural-800 font-semibold block mb-1">
                    Önem <span className="text-red-500">*</span>
                  </label>
                  <Select
                    placeholder="Önem Seçin"
                    searchable
                    clearable
                    className="w-full"
                    data={[
                      { value: "Low", label: "Düşük" },
                      { value: "Medium", label: "Orta" },
                      { value: "High", label: "Yüksek" },
                      { value: "Critical", label: "Kritik" }
                    ]}
                    value={formData.priority}
                    onChange={(e) => setFormData({ ...formData, priority: e })}
                  />
                </div>

                <div>
                  <label className="text-natural-800 font-semibold block mb-1">
                    Proje Türü <span className="text-red-500">*</span>
                  </label>
                  <Select
                    placeholder="Proje Türü Seçin"
                    searchable
                    clearable
                    className="w-full"
                    data={projectTypes}
                    value={formData.projectTypeId.toString()}
                    onChange={(e) => setFormData({ ...formData, projectTypeId: Number(e) })}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>


        <Divider />

        {/* KONUM BİLGİLERİ */}
        <div className="w-full md:w-1/2 space-y-">
          <h6 className="text-lg font-bold text-ivosis-700 mb-6">Konum Bilgileri</h6>

          <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-6">
            {/* Şehir */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                Şehir <span className="text-red-500">*</span>
              </label>
              <Select
                placeholder="Şehir Seçin"
                searchable
                clearable
                className="w-full"
                data={cities} value={formData.address.cityId.toString()} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, cityId: Number(e), districtId: 0, neighborhoodId: 0 } })}
              />
            </div>

            {/* İlçe */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                İlçe <span className="text-red-500">*</span>
              </label>
              <Select
                placeholder='Mahalle Seçin'
                searchable
                clearable
                className='w-full'
                data={districts} value={formData.address.districtId.toString()} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, districtId: Number(e), neighborhoodId: 0 } })}
              />
            </div>

            {/* Mahalle */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                Mahalle <span className="text-red-500">*</span>
              </label>
              <Select
                placeholder='Mahalle Seçin'
                searchable
                clearable
                className='w-full'
                data={neighborhood} value={formData.address.neighborhoodId.toString()} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, neighborhoodId: Number(e) } })}
              />
            </div>

            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                Ada <span className="text-red-500">*</span>
              </label>
              <TextInput className="w-full" value={formData.address.ada} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, ada: e.currentTarget.value } })} />
            </div>

            {/* Parsel */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                Parsel <span className="text-red-500">*</span>
              </label>
              <TextInput className="w-full" value={formData.address.parsel} onChange={(e) => setFormData({ ...formData, address: { ...formData.address, parsel: e.currentTarget.value } })} />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Ada */}

          </div>
        </div>


        <Divider />

        {/* TEKNİK BİLGİLER */}
        <div className="w-full md:w-1/2 space-y-6">
          <h6 className="text-lg font-bold text-ivosis-700 mb-6">Teknik Bilgiler</h6>

          {/* Satır 1 */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            {/* Panel Sayısı */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                Panel Sayısı <span className="text-red-500">*</span>
              </label>
              <TextInput className="w-full" value={formData.panelCount} onChange={(e) => setFormData({ ...formData, panelCount: e.currentTarget.value })} />
            </div>

            {/* Panel Gücü */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                Panel Gücü <span className="text-red-500">*</span>
              </label>
              <TextInput className="w-full" value={formData.panelPower} onChange={(e) => setFormData({ ...formData, panelPower: e.currentTarget.value })} />
            </div>

            {/* Panel Markası */}
            <div>
              <label className='text-natural-800 font-semibold block mb-1'>
                Panel Markası <span className='text-red-500'>*</span>
              </label>
              <Select
                placeholder='Panel Markası Seçin'
                searchable
                clearable
                className='w-full'
                data={panelBrand} value={formData.panelBrandId.toString()} onChange={(e) => setFormData({ ...formData, panelBrandId: Number(e) })}
              />
            </div>

            {/* DC (kWp) */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                DC (kWp) <span className="text-red-500">*</span>
              </label>
              <TextInput
                className="w-full"
                value={formData.dcValue}
                readOnly
              />
            </div>
          </div>

          {/* Satır 2 */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            {/* İnvertör Sayısı */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                İnvertör Sayısı <span className="text-red-500">*</span>
              </label>
              <TextInput className="w-full" value={formData.inverterCount} onChange={(e) => setFormData({ ...formData, inverterCount: e.currentTarget.value })} />
            </div>

            {/* İnvertör Gücü */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                İnvertör Gücü <span className="text-red-500">*</span>
              </label>
              <TextInput className="w-full" value={formData.inverterPower} onChange={(e) => setFormData({ ...formData, inverterPower: e.currentTarget.value })} />
            </div>

            {/* İnvertör Markası */}
            <div>
              <label className='text-natural-800 font-semibold block mb-1'>
                Panel Markası <span className='text-red-500'>*</span>
              </label>
              <Select
                placeholder='Panel Markası Seçin'
                searchable
                clearable
                className='w-full'
                data={inverterBrand} value={formData.inverterBrandId.toString()} onChange={(e) => setFormData({ ...formData, inverterBrandId: Number(e) })}
              />
            </div>

            {/* AC (kWe) */}
            <div>
              <label className="text-natural-800 font-semibold block mb-1">
                AC (kWe) <span className="text-red-500">*</span>
              </label>
              <TextInput className="w-full" value={formData.acValue} onChange={(e) => setFormData({ ...formData, acValue: e.currentTarget.value })} />
            </div>
          </div>
        </div>


        <Divider />

        {/* EK YAPI BİLGİLERİ */}
        <div className="w-full md:w-1/2 space-y-6">
          <h6 className="text-lg font-bold text-ivosis-700 mb-4">Ek Yapı Bilgileri</h6>

          {/* Checkbox */}
          <div className="mb-6">
            <Checkbox label="Ek Yapı mı?" checked={hasEkYapi} onChange={(e) => {
              const checked = e.currentTarget.checked;
              setHasEkYapi(checked);
              setFormData({ ...formData, hasAdditionalStructure: checked });
            }} />
          </div>

          {/* Grid alanlar sadece checkbox işaretliyse görünsün */}
          {hasEkYapi && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Panel Sayısı */}
              <div>
                <label className="text-natural-800 font-semibold block mb-1">
                  Panel Sayısı <span className="text-red-500">*</span>
                </label>
                <TextInput className="w-full" value={formData.additionalPanelCount} onChange={(e) => setFormData({ ...formData, additionalPanelCount: Number(e.currentTarget.value) })} />
              </div>

              {/* Panel Gücü */}
              <div>
                <label className='text-natural-800 font-semibold block mb-1'>
                  Panel Gücü <span className='text-red-500'>*</span>
                </label>
                <TextInput className='w-full' value={formData.additionalPanelPower} onChange={(e) => setFormData({ ...formData, additionalPanelPower: Number(e.currentTarget.value) })} />
              </div>

              {/* İnvertör Sayısı */}
              <div>
                <label className="text-natural-800 font-semibold block mb-1">
                  İnvertör Sayısı <span className="text-red-500">*</span>
                </label>
                <TextInput className="w-full" value={formData.additionalInverterCount} onChange={(e) => setFormData({ ...formData, additionalInverterCount: Number(e.currentTarget.value) })} />
              </div>
            </div>
          )}
        </div>


        {/* SUBMIT BUTTON */}
        <div className="-full md:w-1/2 space-y-6 text-center">
          <Button className="bg-green-500 hover:!bg-green-500" onClick={handleSubmit} >Projeyi Kaydet</Button>
        </div>
      </div>

    </div> //ana div
  );
};

export default ProjectCreate;
