{"ast":null,"code":"'use client';\n\nimport { useRef } from 'react';\nimport { useForceUpdate } from '../use-force-update/use-force-update.mjs';\nfunction readonlySetLikeToSet(input) {\n  if (input instanceof Set) {\n    return input;\n  }\n  const result = /* @__PURE__ */new Set();\n  for (const item of input) {\n    result.add(item);\n  }\n  return result;\n}\nfunction useSet(values) {\n  const setRef = useRef(new Set(values));\n  const forceUpdate = useForceUpdate();\n  setRef.current.add = (...args) => {\n    const res = Set.prototype.add.apply(setRef.current, args);\n    forceUpdate();\n    return res;\n  };\n  setRef.current.clear = (...args) => {\n    Set.prototype.clear.apply(setRef.current, args);\n    forceUpdate();\n  };\n  setRef.current.delete = (...args) => {\n    const res = Set.prototype.delete.apply(setRef.current, args);\n    forceUpdate();\n    return res;\n  };\n  setRef.current.union = other => {\n    const result = new Set(setRef.current);\n    readonlySetLikeToSet(other).forEach(item => result.add(item));\n    return result;\n  };\n  return setRef.current;\n}\nexport { readonlySetLikeToSet, useSet };","map":{"version":3,"names":["readonlySetLikeToSet","input","Set","result","item","add","useSet","values","setRef","useRef","forceUpdate","useForceUpdate","current","args","res","prototype","apply","clear","delete","union","other","forEach"],"sources":["C:\\Users\\Asus\\Desktop\\Ivosis\\IvosisProjectManagement\\frontend\\node_modules\\@mantine\\hooks\\src\\use-set\\use-set.ts"],"sourcesContent":["import { useRef } from 'react';\nimport { useForceUpdate } from '../use-force-update/use-force-update';\n\nexport function readonlySetLikeToSet<T>(input: ReadonlySetLike<T>): Set<T> {\n  if (input instanceof Set) {\n    return input;\n  }\n  const result = new Set<T>();\n  for (const item of input as any) {\n    result.add(item);\n  }\n  return result;\n}\n\nexport function useSet<T>(values?: T[]): Set<T> {\n  const setRef = useRef(new Set(values));\n  const forceUpdate = useForceUpdate();\n\n  setRef.current.add = (...args) => {\n    const res = Set.prototype.add.apply(setRef.current, args);\n    forceUpdate();\n    return res;\n  };\n\n  setRef.current.clear = (...args) => {\n    Set.prototype.clear.apply(setRef.current, args);\n    forceUpdate();\n  };\n\n  setRef.current.delete = (...args) => {\n    const res = Set.prototype.delete.apply(setRef.current, args);\n    forceUpdate();\n    return res;\n  };\n\n  setRef.current.union = <U>(other: ReadonlySetLike<U>): Set<T | U> => {\n    const result = new Set<T | U>(setRef.current as Set<T>);\n    readonlySetLikeToSet(other).forEach((item) => result.add(item));\n    return result;\n  };\n\n  return setRef.current;\n}\n"],"mappings":";;;;AAGO,SAASA,qBAAwBC,KAAmC;EACzE,IAAIA,KAAA,YAAiBC,GAAK;IACjB,OAAAD,KAAA;EAAA;EAEH,MAAAE,MAAA,sBAAaD,GAAO;EAC1B,WAAWE,IAAA,IAAQH,KAAc;IAC/BE,MAAA,CAAOE,GAAA,CAAID,IAAI;EAAA;EAEV,OAAAD,MAAA;AACT;AAEO,SAASG,OAAUC,MAAsB;EAC9C,MAAMC,MAAS,GAAAC,MAAA,CAAO,IAAIP,GAAA,CAAIK,MAAM,CAAC;EACrC,MAAMG,WAAA,GAAcC,cAAe;EAE5BH,MAAA,CAAAI,OAAA,CAAQP,GAAM,OAAIQ,IAAS;IAChC,MAAMC,GAAA,GAAMZ,GAAI,CAAAa,SAAA,CAAUV,GAAA,CAAIW,KAAM,CAAAR,MAAA,CAAOI,OAAA,EAASC,IAAI;IAC5CH,WAAA;IACL,OAAAI,GAAA;EACT;EAEON,MAAA,CAAAI,OAAA,CAAQK,KAAQ,OAAIJ,IAAS;IAClCX,GAAA,CAAIa,SAAU,CAAAE,KAAA,CAAMD,KAAM,CAAAR,MAAA,CAAOI,OAAA,EAASC,IAAI;IAClCH,WAAA;EACd;EAEOF,MAAA,CAAAI,OAAA,CAAQM,MAAS,OAAIL,IAAS;IACnC,MAAMC,GAAA,GAAMZ,GAAI,CAAAa,SAAA,CAAUG,MAAA,CAAOF,KAAM,CAAAR,MAAA,CAAOI,OAAA,EAASC,IAAI;IAC/CH,WAAA;IACL,OAAAI,GAAA;EACT;EAEON,MAAA,CAAAI,OAAA,CAAQO,KAAQ,GAAIC,KAA0C;IACnE,MAAMjB,MAAS,OAAID,GAAW,CAAAM,MAAA,CAAOI,OAAiB;IACjCZ,oBAAA,CAAAoB,KAAK,EAAEC,OAAQ,CAACjB,IAAA,IAASD,MAAO,CAAAE,GAAA,CAAID,IAAI,CAAC;IACvD,OAAAD,MAAA;EACT;EAEA,OAAOK,MAAO,CAAAI,OAAA;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}