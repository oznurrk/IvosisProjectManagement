{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nfunction useValidatedState(initialValue, validate, initialValidationState) {\n  const [value, setValue] = useState(initialValue);\n  const [lastValidValue, setLastValidValue] = useState(validate(initialValue) ? initialValue : void 0);\n  const [valid, setValid] = useState(typeof initialValidationState === \"boolean\" ? initialValidationState : validate(initialValue));\n  const onChange = val => {\n    if (validate(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n    setValue(val);\n  };\n  return [{\n    value,\n    lastValidValue,\n    valid\n  }, onChange];\n}\nexport { useValidatedState };","map":{"version":3,"names":["useValidatedState","initialValue","validate","initialValidationState","value","setValue","useState","lastValidValue","setLastValidValue","valid","setValid","onChange","val"],"sources":["C:\\IVOSIS\\IvosisProjectManagement\\frontend\\node_modules\\@mantine\\hooks\\src\\use-validated-state\\use-validated-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport interface UseValidatedStateValue<T> {\n  /** Current value */\n  value: T;\n\n  /** Last valid value */\n  lastValidValue: T | undefined;\n\n  /** True if the current value is valid, false otherwise */\n  valid: boolean;\n}\n\nexport type UseValidatedStateReturnValue<T> = [\n  /** Current value */\n  UseValidatedStateValue<T>,\n  /** Handler to update the state, passes `value` and `payload` to `onChange` */\n  (value: T) => void,\n];\n\nexport function useValidatedState<T>(\n  initialValue: T,\n  validate: (value: T) => boolean,\n  initialValidationState?: boolean\n): UseValidatedStateReturnValue<T> {\n  const [value, setValue] = useState<T>(initialValue);\n  const [lastValidValue, setLastValidValue] = useState<T | undefined>(\n    validate(initialValue) ? initialValue : undefined\n  );\n  const [valid, setValid] = useState<boolean>(\n    typeof initialValidationState === 'boolean' ? initialValidationState : validate(initialValue)\n  );\n\n  const onChange = (val: T) => {\n    if (validate(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n\n    setValue(val);\n  };\n\n  return [{ value, lastValidValue, valid }, onChange] as const;\n}\n"],"mappings":";;;AAoBgB,SAAAA,kBACdC,YACA,EAAAC,QAAA,EACAC,sBACiC;EACjC,MAAM,CAACC,KAAA,EAAOC,QAAQ,IAAIC,QAAA,CAAYL,YAAY;EAC5C,OAACM,cAAgB,EAAAC,iBAAiB,CAAI,GAAAF,QAAA,CAC1CJ,QAAA,CAASD,YAAY,IAAIA,YAAe,SAC1C;EACM,OAACQ,KAAO,EAAAC,QAAQ,CAAI,GAAAJ,QAAA,CACxB,OAAOH,sBAAA,KAA2B,SAAY,GAAAA,sBAAA,GAAyBD,QAAA,CAASD,YAAY,CAC9F;EAEM,MAAAU,QAAA,GAAYC,GAAW;IACvB,IAAAV,QAAA,CAASU,GAAG,CAAG;MACjBJ,iBAAA,CAAkBI,GAAG;MACrBF,QAAA,CAAS,IAAI;IAAA,CACR;MACLA,QAAA,CAAS,KAAK;IAAA;IAGhBL,QAAA,CAASO,GAAG;EACd;EAEA,OAAO,CAAC;IAAER,KAAA;IAAOG,cAAgB;IAAAE;EAAA,GAASE,QAAQ;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}