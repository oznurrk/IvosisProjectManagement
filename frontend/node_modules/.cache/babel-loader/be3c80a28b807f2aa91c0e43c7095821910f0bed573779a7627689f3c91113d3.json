{"ast":null,"code":"'use client';\n\nimport { useRef, useCallback, useEffect } from 'react';\nfunction useEventListener(type, listener, options) {\n  const previousListener = useRef(null);\n  const previousNode = useRef(null);\n  const callbackRef = useCallback(node => {\n    if (!node) {\n      return;\n    }\n    if (previousNode.current && previousListener.current) {\n      previousNode.current.removeEventListener(type, previousListener.current, options);\n    }\n    node.addEventListener(type, listener, options);\n    previousNode.current = node;\n    previousListener.current = listener;\n  }, [type, listener, options]);\n  useEffect(() => () => {\n    if (previousNode.current && previousListener.current) {\n      previousNode.current.removeEventListener(type, previousListener.current, options);\n    }\n  }, [type, options]);\n  return callbackRef;\n}\nexport { useEventListener };","map":{"version":3,"names":["useEventListener","type","listener","options","previousListener","useRef","previousNode","callbackRef","useCallback","node","current","removeEventListener","addEventListener","useEffect"],"sources":["C:\\Users\\Asus\\Desktop\\Ivosis\\IvosisProjectManagement\\frontend\\node_modules\\@mantine\\hooks\\src\\use-event-listener\\use-event-listener.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\n\nexport function useEventListener<K extends keyof HTMLElementEventMap, T extends HTMLElement = any>(\n  type: K,\n  listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n): React.RefCallback<T | null> {\n  const previousListener = useRef<Function | null>(null);\n  const previousNode = useRef<T | null>(null);\n\n  const callbackRef: React.RefCallback<T | null> = useCallback(\n    (node) => {\n      if (!node) {\n        return;\n      }\n\n      if (previousNode.current && previousListener.current) {\n        previousNode.current.removeEventListener(type, previousListener.current as any, options);\n      }\n\n      node.addEventListener(type, listener as any, options);\n      previousNode.current = node;\n      previousListener.current = listener;\n    },\n    [type, listener, options]\n  );\n\n  useEffect(\n    () => () => {\n      if (previousNode.current && previousListener.current) {\n        previousNode.current.removeEventListener(type, previousListener.current as any, options);\n      }\n    },\n    [type, options]\n  );\n\n  return callbackRef;\n}\n"],"mappings":";;;AAEgB,SAAAA,iBACdC,IACA,EAAAC,QAAA,EACAC,OAC6B;EACvB,MAAAC,gBAAA,GAAmBC,MAAA,CAAwB,IAAI;EAC/C,MAAAC,YAAA,GAAeD,MAAA,CAAiB,IAAI;EAE1C,MAAME,WAA2C,GAAAC,WAAA,CAC9CC,IAAS;IACR,IAAI,CAACA,IAAM;MACT;IAAA;IAGE,IAAAH,YAAA,CAAaI,OAAW,IAAAN,gBAAA,CAAiBM,OAAS;MACpDJ,YAAA,CAAaI,OAAQ,CAAAC,mBAAA,CAAoBV,IAAM,EAAAG,gBAAA,CAAiBM,OAAA,EAAgBP,OAAO;IAAA;IAGpFM,IAAA,CAAAG,gBAAA,CAAiBX,IAAM,EAAAC,QAAA,EAAiBC,OAAO;IACpDG,YAAA,CAAaI,OAAU,GAAAD,IAAA;IACvBL,gBAAA,CAAiBM,OAAU,GAAAR,QAAA;EAC7B,GACA,CAACD,IAAM,EAAAC,QAAA,EAAUC,OAAO,CAC1B;EAEAU,SAAA,CACE,MAAM,MAAM;IACN,IAAAP,YAAA,CAAaI,OAAW,IAAAN,gBAAA,CAAiBM,OAAS;MACpDJ,YAAA,CAAaI,OAAQ,CAAAC,mBAAA,CAAoBV,IAAM,EAAAG,gBAAA,CAAiBM,OAAA,EAAgBP,OAAO;IAAA;EAE3F,GACA,CAACF,IAAA,EAAME,OAAO,CAChB;EAEO,OAAAI,WAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}