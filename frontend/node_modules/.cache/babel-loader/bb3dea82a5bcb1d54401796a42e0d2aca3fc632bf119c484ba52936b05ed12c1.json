{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useRef, useState, useEffect } from 'react';\nimport { useUncontrolled, useMove, useMergedRef, clamp } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport { getSize, getRadius } from '../../../core/utils/get-size/get-size.mjs';\nimport { findClosestNumber } from '../../../core/utils/find-closest-number/find-closest-number.mjs';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { SliderProvider } from '../Slider.context.mjs';\nimport { SliderRoot } from '../SliderRoot/SliderRoot.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nimport { Track } from '../Track/Track.mjs';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value.mjs';\nimport { getClientPosition } from '../utils/get-client-position/get-client-position.mjs';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value.mjs';\nimport { getPosition } from '../utils/get-position/get-position.mjs';\nimport { getPrecision } from '../utils/get-precision/get-precision.mjs';\nimport { getNextMarkValue, getPreviousMarkValue, getLastMarkValue, getFirstMarkValue } from '../utils/get-step-mark-value/get-step-mark-value.mjs';\nimport classes from '../Slider.module.css.mjs';\nconst varsResolver = createVarsResolver((theme, {\n  size,\n  color,\n  thumbSize,\n  radius\n}) => ({\n  root: {\n    \"--slider-size\": getSize(size, \"slider-size\"),\n    \"--slider-color\": color ? getThemeColor(color, theme) : void 0,\n    \"--slider-radius\": radius === void 0 ? void 0 : getRadius(radius),\n    \"--slider-thumb-size\": thumbSize !== void 0 ? rem(thumbSize) : \"calc(var(--slider-size) * 2)\"\n  }\n}));\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  minRange: 10,\n  step: 1,\n  marks: [],\n  label: f => f,\n  labelTransitionProps: {\n    transition: \"fade\",\n    duration: 0\n  },\n  labelAlwaysOn: false,\n  showLabelOnHover: true,\n  disabled: false,\n  pushOnOverlap: true,\n  scale: v => v,\n  size: \"md\",\n  maxRange: Infinity\n};\nconst RangeSlider = factory((_props, ref) => {\n  const props = useProps(\"RangeSlider\", defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    value,\n    onChange,\n    onChangeEnd,\n    size,\n    min,\n    max,\n    domain,\n    minRange,\n    maxRange,\n    step,\n    precision: _precision,\n    defaultValue,\n    name,\n    marks,\n    label,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbFromLabel,\n    thumbToLabel,\n    showLabelOnHover,\n    thumbChildren,\n    disabled,\n    unstyled,\n    scale,\n    inverted,\n    className,\n    style,\n    vars,\n    hiddenInputProps,\n    restrictToMarks,\n    thumbProps,\n    pushOnOverlap,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Slider\",\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    vars,\n    varsResolver,\n    unstyled\n  });\n  const containerRef = useRef(null);\n  const {\n    dir\n  } = useDirection();\n  const [focused, setFocused] = useState(-1);\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [min, max],\n    onChange\n  });\n  const valueRef = useRef(_value);\n  const thumbs = useRef([]);\n  const root = useRef(null);\n  const thumbIndex = useRef(void 0);\n  const [domainMin, domainMax] = domain || [min, max];\n  const positions = [getPosition({\n    value: _value[0],\n    min: domainMin,\n    max: domainMax\n  }), getPosition({\n    value: _value[1],\n    min: domainMin,\n    max: domainMax\n  })];\n  const precision = _precision ?? getPrecision(step);\n  const _setValue = val => {\n    setValue(val);\n    valueRef.current = val;\n  };\n  useEffect(() => {\n    if (Array.isArray(value)) {\n      valueRef.current = value;\n    }\n  }, Array.isArray(value) ? [value[0], value[1]] : [null, null]);\n  const setRangedValue = (val, index, triggerChangeEnd) => {\n    if (index === -1) {\n      return;\n    }\n    const clone = [...valueRef.current];\n    if (restrictToMarks && marks) {\n      const closest = findClosestNumber(val, marks.map(m => m.value));\n      const current = clone[index];\n      clone[index] = closest;\n      const otherIndex = index === 0 ? 1 : 0;\n      const lastMarkValue = getLastMarkValue(marks);\n      const firstMarkValue = getFirstMarkValue(marks);\n      if (closest === lastMarkValue && clone[otherIndex] === lastMarkValue) {\n        clone[index] = current;\n      } else if (closest === firstMarkValue && clone[otherIndex] === firstMarkValue) {\n        clone[index] = current;\n      } else if (closest === clone[otherIndex]) {\n        if (current > clone[otherIndex]) {\n          clone[otherIndex] = getPreviousMarkValue(closest, marks);\n        } else {\n          clone[otherIndex] = getNextMarkValue(closest, marks);\n        }\n      }\n    } else {\n      const clampedVal = clamp(val, min, max);\n      clone[index] = clampedVal;\n      if (index === 0) {\n        if (clampedVal > clone[1] - (minRange - 1e-9)) {\n          if (pushOnOverlap) {\n            clone[1] = Math.min(val + minRange, max);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n        if (clampedVal > (max - (minRange - 1e-9) || min)) {\n          clone[index] = valueRef.current[index];\n        }\n        if (clone[1] - val > maxRange) {\n          if (pushOnOverlap) {\n            clone[1] = val + maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n      if (index === 1) {\n        if (clampedVal < clone[0] + minRange) {\n          if (pushOnOverlap) {\n            clone[0] = Math.max(val - minRange, min);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n        if (clampedVal < clone[0] + minRange) {\n          clone[index] = valueRef.current[index];\n        }\n        if (clampedVal - clone[0] > maxRange) {\n          if (pushOnOverlap) {\n            clone[0] = val - maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n    }\n    clone[0] = getFloatingValue(clone[0], precision);\n    clone[1] = getFloatingValue(clone[1], precision);\n    if (clone[0] > clone[1]) {\n      const temp = clone[0];\n      clone[0] = clone[1];\n      clone[1] = temp;\n    }\n    _setValue(clone);\n    if (triggerChangeEnd) {\n      onChangeEnd?.(valueRef.current);\n    }\n  };\n  const handleChange = val => {\n    if (!disabled && thumbIndex.current !== void 0) {\n      const nextValue = getChangeValue({\n        value: val,\n        min: domainMin,\n        max: domainMax,\n        step,\n        precision\n      });\n      setRangedValue(nextValue, thumbIndex.current, false);\n    }\n  };\n  const {\n    ref: useMoveRef,\n    active\n  } = useMove(({\n    x\n  }) => handleChange(x), {\n    onScrubEnd: () => !disabled && onChangeEnd?.(valueRef.current)\n  }, dir);\n  function handleThumbMouseDown(index) {\n    thumbIndex.current = index;\n  }\n  const handleTrackMouseDownCapture = event => {\n    if (containerRef.current) {\n      containerRef.current.focus();\n      const rect = containerRef.current.getBoundingClientRect();\n      const changePosition = getClientPosition(event.nativeEvent);\n      const changeValue = getChangeValue({\n        value: changePosition - rect.left,\n        max,\n        min,\n        step,\n        containerWidth: rect.width\n      });\n      const nearestHandle = Math.abs(_value[0] - changeValue) > Math.abs(_value[1] - changeValue) ? 1 : 0;\n      const _nearestHandle = dir === \"ltr\" ? nearestHandle : nearestHandle === 1 ? 0 : 1;\n      thumbIndex.current = _nearestHandle;\n    }\n  };\n  const getFocusedThumbIndex = () => {\n    if (focused !== 1 && focused !== 0) {\n      setFocused(0);\n      return 0;\n    }\n    return focused;\n  };\n  const handleTrackKeydownCapture = event => {\n    if (!disabled) {\n      switch (event.key) {\n        case \"ArrowUp\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? getNextMarkValue(valueRef.current[focusedIndex], marks) : Math.min(Math.max(valueRef.current[focusedIndex] + step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowRight\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? (dir === \"rtl\" ? getPreviousMarkValue : getNextMarkValue)(valueRef.current[focusedIndex], marks) : Math.min(Math.max(dir === \"rtl\" ? valueRef.current[focusedIndex] - step : valueRef.current[focusedIndex] + step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowDown\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? getPreviousMarkValue(valueRef.current[focusedIndex], marks) : Math.min(Math.max(valueRef.current[focusedIndex] - step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowLeft\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? (dir === \"rtl\" ? getNextMarkValue : getPreviousMarkValue)(valueRef.current[focusedIndex], marks) : Math.min(Math.max(dir === \"rtl\" ? valueRef.current[focusedIndex] + step : valueRef.current[focusedIndex] - step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n      }\n    }\n  };\n  const sharedThumbProps = {\n    max,\n    min,\n    size,\n    labelTransitionProps,\n    labelAlwaysOn,\n    onBlur: () => setFocused(-1)\n  };\n  const hasArrayThumbChildren = Array.isArray(thumbChildren);\n  return /* @__PURE__ */jsx(SliderProvider, {\n    value: {\n      getStyles\n    },\n    children: /* @__PURE__ */jsxs(SliderRoot, {\n      ...others,\n      size,\n      ref: useMergedRef(ref, root),\n      disabled,\n      onMouseDownCapture: () => root.current?.focus(),\n      onKeyDownCapture: () => {\n        if (thumbs.current[0]?.parentElement?.contains(document.activeElement)) {\n          return;\n        }\n        thumbs.current[0]?.focus();\n      },\n      children: [/* @__PURE__ */jsxs(Track, {\n        offset: positions[0],\n        marksOffset: _value[0],\n        filled: positions[1] - positions[0],\n        marks,\n        inverted,\n        min: domainMin,\n        max: domainMax,\n        value: _value[1],\n        disabled,\n        containerProps: {\n          ref: useMergedRef(containerRef, useMoveRef),\n          onMouseEnter: showLabelOnHover ? () => setHovered(true) : void 0,\n          onMouseLeave: showLabelOnHover ? () => setHovered(false) : void 0,\n          onTouchStartCapture: handleTrackMouseDownCapture,\n          onTouchEndCapture: () => {\n            thumbIndex.current = -1;\n          },\n          onMouseDownCapture: handleTrackMouseDownCapture,\n          onMouseUpCapture: () => {\n            thumbIndex.current = -1;\n          },\n          onKeyDownCapture: handleTrackKeydownCapture\n        },\n        children: [/* @__PURE__ */jsx(Thumb, {\n          ...sharedThumbProps,\n          value: scale(_value[0]),\n          position: positions[0],\n          dragging: active,\n          label: typeof label === \"function\" ? label(getFloatingValue(scale(_value[0]), precision)) : label,\n          ref: node => {\n            if (node) {\n              thumbs.current[0] = node;\n            }\n          },\n          thumbLabel: thumbFromLabel,\n          onMouseDown: () => handleThumbMouseDown(0),\n          onFocus: () => setFocused(0),\n          showLabelOnHover,\n          isHovered: hovered,\n          disabled,\n          ...thumbProps?.(0),\n          children: hasArrayThumbChildren ? thumbChildren[0] : thumbChildren\n        }), /* @__PURE__ */jsx(Thumb, {\n          ...sharedThumbProps,\n          thumbLabel: thumbToLabel,\n          value: scale(_value[1]),\n          position: positions[1],\n          dragging: active,\n          label: typeof label === \"function\" ? label(getFloatingValue(scale(_value[1]), precision)) : label,\n          ref: node => {\n            if (node) {\n              thumbs.current[1] = node;\n            }\n          },\n          onMouseDown: () => handleThumbMouseDown(1),\n          onFocus: () => setFocused(1),\n          showLabelOnHover,\n          isHovered: hovered,\n          disabled,\n          ...thumbProps?.(1),\n          children: hasArrayThumbChildren ? thumbChildren[1] : thumbChildren\n        })]\n      }), /* @__PURE__ */jsx(\"input\", {\n        type: \"hidden\",\n        name: `${name}_from`,\n        value: _value[0],\n        ...hiddenInputProps\n      }), /* @__PURE__ */jsx(\"input\", {\n        type: \"hidden\",\n        name: `${name}_to`,\n        value: _value[1],\n        ...hiddenInputProps\n      })]\n    })\n  });\n});\nRangeSlider.classes = classes;\nRangeSlider.displayName = \"@mantine/core/RangeSlider\";\nexport { RangeSlider };","map":{"version":3,"names":["varsResolver","createVarsResolver","theme","size","color","thumbSize","radius","root","getSize","getThemeColor","getRadius","rem","defaultProps","min","max","minRange","step","marks","label","f","labelTransitionProps","transition","duration","labelAlwaysOn","showLabelOnHover","disabled","pushOnOverlap","scale","v","maxRange","Infinity","RangeSlider","factory","_props","ref","props","useProps","classNames","styles","value","onChange","onChangeEnd","domain","precision","_precision","defaultValue","name","thumbFromLabel","thumbToLabel","thumbChildren","unstyled","inverted","className","style","vars","hiddenInputProps","restrictToMarks","thumbProps","others","getStyles","useStyles","classes","containerRef","useRef","dir","useDirection","focused","setFocused","useState","hovered","setHovered","_value","setValue","useUncontrolled","finalValue","valueRef","thumbs","thumbIndex","domainMin","domainMax","positions","getPosition","getPrecision","_setValue","val","current","useEffect","Array","isArray","setRangedValue","index","triggerChangeEnd","clone","closest","findClosestNumber","map","m","otherIndex","lastMarkValue","getLastMarkValue","firstMarkValue","getFirstMarkValue","getPreviousMarkValue","getNextMarkValue","clampedVal","clamp","Math","getFloatingValue","temp","handleChange","nextValue","getChangeValue","useMoveRef","active","useMove","x","onScrubEnd","handleThumbMouseDown","handleTrackMouseDownCapture","event","focus","rect","getBoundingClientRect","changePosition","getClientPosition","nativeEvent","changeValue","left","containerWidth","width","nearestHandle","abs","_nearestHandle","getFocusedThumbIndex","handleTrackKeydownCapture","key","preventDefault","focusedIndex","sharedThumbProps","onBlur","hasArrayThumbChildren","jsx","SliderProvider","children","jsxs","SliderRoot","useMergedRef","onMouseDownCapture","onKeyDownCapture","parentElement","contains","document","activeElement","Track","offset","marksOffset","filled","containerProps","onMouseEnter","onMouseLeave","onTouchStartCapture","onTouchEndCapture","onMouseUpCapture","Thumb","position","dragging","node","thumbLabel","onMouseDown","onFocus","isHovered","type","displayName"],"sources":["C:\\Users\\Asus\\Desktop\\Ivosis\\IvosisProjectManagement\\frontend\\node_modules\\@mantine\\core\\src\\components\\Slider\\RangeSlider\\RangeSlider.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { clamp, useMergedRef, useMove, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  findClosestNumber,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  rem,\n  StylesApiProps,\n  useDirection,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { TransitionOverride } from '../../Transition';\nimport { SliderCssVariables, SliderProvider, SliderStylesNames } from '../Slider.context';\nimport { SliderRoot } from '../SliderRoot/SliderRoot';\nimport { Thumb } from '../Thumb/Thumb';\nimport { Track } from '../Track/Track';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value';\nimport { getClientPosition } from '../utils/get-client-position/get-client-position';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value';\nimport { getPosition } from '../utils/get-position/get-position';\nimport { getPrecision } from '../utils/get-precision/get-precision';\nimport {\n  getFirstMarkValue,\n  getLastMarkValue,\n  getNextMarkValue,\n  getPreviousMarkValue,\n} from '../utils/get-step-mark-value/get-step-mark-value';\nimport classes from '../Slider.module.css';\n\nexport type RangeSliderValue = [number, number];\n\nexport interface RangeSliderProps\n  extends BoxProps,\n    StylesApiProps<RangeSliderFactory>,\n    ElementProps<'div', 'onChange' | 'value' | 'defaultValue'> {\n  /** Key of `theme.colors` or any valid CSS color, controls color of track and thumb, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, numbers are converted to rem, `'xl'` by default */\n  radius?: MantineRadius;\n\n  /** Controls size of the track, `'md'` by default */\n  size?: MantineSize | (string & {}) | number;\n\n  /** Minimal possible value, `0` by default */\n  min?: number;\n\n  /** Maximum possible value, `100` by default */\n  max?: number;\n\n  /** Domain of the slider, defines the full range of possible values, `[min, max]` by default */\n  domain?: [number, number];\n\n  /** Number by which value will be incremented/decremented with thumb drag and arrows, `1` by default */\n  step?: number;\n\n  /** Number of significant digits after the decimal point */\n  precision?: number;\n\n  /** Controlled component value */\n  value?: RangeSliderValue;\n\n  /** Uncontrolled component default value */\n  defaultValue?: RangeSliderValue;\n\n  /** Called when value changes */\n  onChange?: (value: RangeSliderValue) => void;\n\n  /** Called when user stops dragging slider or changes value with arrows */\n  onChangeEnd?: (value: RangeSliderValue) => void;\n\n  /** Hidden input name, use with uncontrolled component */\n  name?: string;\n\n  /** Marks displayed on the track */\n  marks?: { value: number; label?: React.ReactNode }[];\n\n  /** Function to generate label or any react node to render instead, set to null to disable label */\n  label?: React.ReactNode | ((value: number) => React.ReactNode);\n\n  /** Props passed down to the `Transition` component, `{ transition: 'fade', duration: 0 }` by default */\n  labelTransitionProps?: TransitionOverride;\n\n  /** Determines whether the label should be visible when the slider is not being dragged or hovered, `false` by default */\n  labelAlwaysOn?: boolean;\n\n  /** Determines whether the label should be displayed when the slider is hovered, `true` by default */\n  showLabelOnHover?: boolean;\n\n  /** Content rendered inside thumb */\n  thumbChildren?: React.ReactNode;\n\n  /** Disables slider */\n  disabled?: boolean;\n\n  /** Thumb `width` and `height`, by default value is computed based on `size` prop */\n  thumbSize?: number | string;\n\n  /** A transformation function to change the scale of the slider */\n  scale?: (value: number) => number;\n\n  /** Determines whether track values representation should be inverted, `false` by default */\n  inverted?: boolean;\n\n  /** Minimal range interval, `10` by default */\n  minRange?: number;\n\n  /** Maximum range interval, `Infinity` by default */\n  maxRange?: number;\n\n  /** First thumb `aria-label` */\n  thumbFromLabel?: string;\n\n  /** Second thumb `aria-label` */\n  thumbToLabel?: string;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: React.ComponentPropsWithoutRef<'input'>;\n\n  /** Determines whether the selection should be only allowed from the given marks array, `false` by default */\n  restrictToMarks?: boolean;\n\n  /** Props passed down to thumb element based on the thumb index */\n  thumbProps?: (index: 0 | 1) => React.ComponentPropsWithoutRef<'div'>;\n\n  /** Determines whether the other thumb should be pushed by the current thumb dragging when `minRange`/`maxRange` is reached, `true` by default */\n  pushOnOverlap?: boolean;\n}\n\nexport type RangeSliderFactory = Factory<{\n  props: RangeSliderProps;\n  ref: HTMLDivElement;\n  stylesNames: SliderStylesNames;\n  vars: SliderCssVariables;\n}>;\n\nconst varsResolver = createVarsResolver<RangeSliderFactory>(\n  (theme, { size, color, thumbSize, radius }) => ({\n    root: {\n      '--slider-size': getSize(size, 'slider-size'),\n      '--slider-color': color ? getThemeColor(color, theme) : undefined,\n      '--slider-radius': radius === undefined ? undefined : getRadius(radius),\n      '--slider-thumb-size':\n        thumbSize !== undefined ? rem(thumbSize) : 'calc(var(--slider-size) * 2)',\n    },\n  })\n);\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  minRange: 10,\n  step: 1,\n  marks: [],\n  label: (f) => f,\n  labelTransitionProps: { transition: 'fade', duration: 0 },\n  labelAlwaysOn: false,\n  showLabelOnHover: true,\n  disabled: false,\n  pushOnOverlap: true,\n  scale: (v) => v,\n  size: 'md',\n  maxRange: Infinity,\n} satisfies Partial<RangeSliderProps>;\n\nexport const RangeSlider = factory<RangeSliderFactory>((_props, ref) => {\n  const props = useProps('RangeSlider', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    value,\n    onChange,\n    onChangeEnd,\n    size,\n    min,\n    max,\n    domain,\n    minRange,\n    maxRange,\n    step,\n    precision: _precision,\n    defaultValue,\n    name,\n    marks,\n    label,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbFromLabel,\n    thumbToLabel,\n    showLabelOnHover,\n    thumbChildren,\n    disabled,\n    unstyled,\n    scale,\n    inverted,\n    className,\n    style,\n    vars,\n    hiddenInputProps,\n    restrictToMarks,\n    thumbProps,\n    pushOnOverlap,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<RangeSliderFactory>({\n    name: 'Slider',\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    vars,\n    varsResolver,\n    unstyled,\n  });\n\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const { dir } = useDirection();\n  const [focused, setFocused] = useState(-1);\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled<RangeSliderValue>({\n    value,\n    defaultValue,\n    finalValue: [min, max],\n    onChange,\n  });\n  const valueRef = useRef(_value);\n  const thumbs = useRef<HTMLDivElement[]>([]);\n  const root = useRef<HTMLDivElement>(null);\n  const thumbIndex = useRef<number | undefined>(undefined);\n  const [domainMin, domainMax] = domain || [min!, max!];\n  const positions = [\n    getPosition({ value: _value[0], min: domainMin, max: domainMax }),\n    getPosition({ value: _value[1], min: domainMin, max: domainMax }),\n  ];\n\n  const precision = _precision ?? getPrecision(step);\n\n  const _setValue = (val: RangeSliderValue) => {\n    setValue(val);\n    valueRef.current = val;\n  };\n\n  useEffect(\n    () => {\n      if (Array.isArray(value)) {\n        valueRef.current = value;\n      }\n    },\n    Array.isArray(value) ? [value[0], value[1]] : [null, null]\n  );\n\n  const setRangedValue = (val: number, index: number, triggerChangeEnd: boolean) => {\n    if (index === -1) {\n      return;\n    }\n\n    const clone: RangeSliderValue = [...valueRef.current];\n\n    if (restrictToMarks && marks) {\n      const closest = findClosestNumber(\n        val,\n        marks.map((m) => m.value)\n      );\n\n      const current = clone[index];\n      clone[index] = closest;\n      const otherIndex = index === 0 ? 1 : 0;\n\n      const lastMarkValue = getLastMarkValue(marks);\n      const firstMarkValue = getFirstMarkValue(marks);\n\n      if (closest === lastMarkValue && clone[otherIndex] === lastMarkValue) {\n        clone[index] = current;\n      } else if (closest === firstMarkValue && clone[otherIndex] === firstMarkValue) {\n        clone[index] = current;\n      } else if (closest === clone[otherIndex]) {\n        if (current > clone[otherIndex]) {\n          clone[otherIndex] = getPreviousMarkValue(closest, marks);\n        } else {\n          clone[otherIndex] = getNextMarkValue(closest, marks);\n        }\n      }\n    } else {\n      const clampedVal = clamp(val, min!, max!);\n      clone[index] = clampedVal;\n\n      if (index === 0) {\n        if (clampedVal > clone[1] - (minRange - 0.000000001)) {\n          if (pushOnOverlap) {\n            clone[1] = Math.min(val + minRange, max);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n\n        if (clampedVal > (max - (minRange - 0.000000001) || min)) {\n          clone[index] = valueRef.current[index];\n        }\n\n        if (clone[1] - val > maxRange) {\n          if (pushOnOverlap) {\n            clone[1] = val + maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n\n      if (index === 1) {\n        if (clampedVal < clone[0] + minRange) {\n          if (pushOnOverlap) {\n            clone[0] = Math.max(val - minRange, min);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n\n        if (clampedVal < clone[0] + minRange) {\n          clone[index] = valueRef.current[index];\n        }\n\n        if (clampedVal - clone[0] > maxRange) {\n          if (pushOnOverlap) {\n            clone[0] = val - maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n    }\n\n    clone[0] = getFloatingValue(clone[0], precision);\n    clone[1] = getFloatingValue(clone[1], precision);\n\n    if (clone[0] > clone[1]) {\n      const temp = clone[0];\n      clone[0] = clone[1];\n      clone[1] = temp;\n    }\n\n    _setValue(clone);\n\n    if (triggerChangeEnd) {\n      onChangeEnd?.(valueRef.current);\n    }\n  };\n\n  const handleChange = (val: number) => {\n    if (!disabled && thumbIndex.current !== undefined) {\n      const nextValue = getChangeValue({\n        value: val,\n        min: domainMin,\n        max: domainMax,\n        step,\n        precision,\n      });\n      setRangedValue(nextValue, thumbIndex.current, false);\n    }\n  };\n\n  const { ref: useMoveRef, active } = useMove(\n    ({ x }) => handleChange(x),\n    { onScrubEnd: () => !disabled && onChangeEnd?.(valueRef.current) },\n    dir\n  );\n\n  function handleThumbMouseDown(index: number) {\n    thumbIndex.current = index;\n  }\n\n  const handleTrackMouseDownCapture = (\n    event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n  ) => {\n    if (containerRef.current) {\n      containerRef.current.focus();\n      const rect = containerRef.current.getBoundingClientRect();\n      const changePosition = getClientPosition(event.nativeEvent);\n      const changeValue = getChangeValue({\n        value: changePosition - rect.left,\n        max,\n        min,\n        step,\n        containerWidth: rect.width,\n      });\n\n      const nearestHandle =\n        Math.abs(_value[0] - changeValue) > Math.abs(_value[1] - changeValue) ? 1 : 0;\n      const _nearestHandle = dir === 'ltr' ? nearestHandle : nearestHandle === 1 ? 0 : 1;\n\n      thumbIndex.current = _nearestHandle;\n    }\n  };\n\n  const getFocusedThumbIndex = () => {\n    if (focused !== 1 && focused !== 0) {\n      setFocused(0);\n      return 0;\n    }\n\n    return focused;\n  };\n\n  const handleTrackKeydownCapture = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (!disabled) {\n      switch (event.key) {\n        case 'ArrowUp': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n          const nextValue =\n            restrictToMarks && marks\n              ? getNextMarkValue(valueRef.current[focusedIndex], marks)\n              : Math.min(Math.max(valueRef.current[focusedIndex] + step, min), max);\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowRight': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n\n          const nextValue =\n            restrictToMarks && marks\n              ? (dir === 'rtl' ? getPreviousMarkValue : getNextMarkValue)(\n                  valueRef.current[focusedIndex],\n                  marks\n                )\n              : Math.min(\n                  Math.max(\n                    dir === 'rtl'\n                      ? valueRef.current[focusedIndex] - step\n                      : valueRef.current[focusedIndex] + step,\n                    min\n                  ),\n                  max\n                );\n\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowDown': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n          const nextValue =\n            restrictToMarks && marks\n              ? getPreviousMarkValue(valueRef.current[focusedIndex], marks)\n              : Math.min(Math.max(valueRef.current[focusedIndex] - step, min), max);\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowLeft': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n\n          const nextValue =\n            restrictToMarks && marks\n              ? (dir === 'rtl' ? getNextMarkValue : getPreviousMarkValue)(\n                  valueRef.current[focusedIndex],\n                  marks\n                )\n              : Math.min(\n                  Math.max(\n                    dir === 'rtl'\n                      ? valueRef.current[focusedIndex] + step\n                      : valueRef.current[focusedIndex] - step,\n                    min\n                  ),\n                  max\n                );\n\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        default: {\n          break;\n        }\n      }\n    }\n  };\n\n  const sharedThumbProps = {\n    max,\n    min,\n    size,\n    labelTransitionProps,\n    labelAlwaysOn,\n    onBlur: () => setFocused(-1),\n  };\n\n  const hasArrayThumbChildren = Array.isArray(thumbChildren);\n\n  return (\n    <SliderProvider value={{ getStyles }}>\n      <SliderRoot\n        {...others}\n        size={size}\n        ref={useMergedRef(ref, root)}\n        disabled={disabled}\n        onMouseDownCapture={() => root.current?.focus()}\n        onKeyDownCapture={() => {\n          if (thumbs.current[0]?.parentElement?.contains(document.activeElement)) {\n            return;\n          }\n          thumbs.current[0]?.focus();\n        }}\n      >\n        <Track\n          offset={positions[0]}\n          marksOffset={_value[0]}\n          filled={positions[1] - positions[0]}\n          marks={marks}\n          inverted={inverted}\n          min={domainMin}\n          max={domainMax}\n          value={_value[1]}\n          disabled={disabled}\n          containerProps={{\n            ref: useMergedRef(containerRef, useMoveRef) as any,\n            onMouseEnter: showLabelOnHover ? () => setHovered(true) : undefined,\n            onMouseLeave: showLabelOnHover ? () => setHovered(false) : undefined,\n            onTouchStartCapture: handleTrackMouseDownCapture,\n            onTouchEndCapture: () => {\n              thumbIndex.current = -1;\n            },\n            onMouseDownCapture: handleTrackMouseDownCapture,\n            onMouseUpCapture: () => {\n              thumbIndex.current = -1;\n            },\n            onKeyDownCapture: handleTrackKeydownCapture,\n          }}\n        >\n          <Thumb\n            {...sharedThumbProps}\n            value={scale(_value[0])}\n            position={positions[0]}\n            dragging={active}\n            label={\n              typeof label === 'function'\n                ? label(getFloatingValue(scale(_value[0]), precision))\n                : label\n            }\n            ref={(node) => {\n              if (node) {\n                thumbs.current[0] = node;\n              }\n            }}\n            thumbLabel={thumbFromLabel}\n            onMouseDown={() => handleThumbMouseDown(0)}\n            onFocus={() => setFocused(0)}\n            showLabelOnHover={showLabelOnHover}\n            isHovered={hovered}\n            disabled={disabled}\n            {...thumbProps?.(0)}\n          >\n            {hasArrayThumbChildren ? thumbChildren[0] : thumbChildren}\n          </Thumb>\n\n          <Thumb\n            {...sharedThumbProps}\n            thumbLabel={thumbToLabel}\n            value={scale(_value[1])}\n            position={positions[1]}\n            dragging={active}\n            label={\n              typeof label === 'function'\n                ? label(getFloatingValue(scale(_value[1]), precision))\n                : label\n            }\n            ref={(node) => {\n              if (node) {\n                thumbs.current[1] = node;\n              }\n            }}\n            onMouseDown={() => handleThumbMouseDown(1)}\n            onFocus={() => setFocused(1)}\n            showLabelOnHover={showLabelOnHover}\n            isHovered={hovered}\n            disabled={disabled}\n            {...thumbProps?.(1)}\n          >\n            {hasArrayThumbChildren ? thumbChildren[1] : thumbChildren}\n          </Thumb>\n        </Track>\n\n        <input type=\"hidden\" name={`${name}_from`} value={_value[0]} {...hiddenInputProps} />\n        <input type=\"hidden\" name={`${name}_to`} value={_value[1]} {...hiddenInputProps} />\n      </SliderRoot>\n    </SliderProvider>\n  );\n});\n\nRangeSlider.classes = classes;\nRangeSlider.displayName = '@mantine/core/RangeSlider';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}