{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport { useUncontrolled, clamp, useMove, useMergedRef } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport { getSize, getRadius } from '../../../core/utils/get-size/get-size.mjs';\nimport { findClosestNumber } from '../../../core/utils/find-closest-number/find-closest-number.mjs';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { SliderProvider } from '../Slider.context.mjs';\nimport { SliderRoot } from '../SliderRoot/SliderRoot.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nimport { Track } from '../Track/Track.mjs';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value.mjs';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value.mjs';\nimport { getPosition } from '../utils/get-position/get-position.mjs';\nimport { getPrecision } from '../utils/get-precision/get-precision.mjs';\nimport { getLastMarkValue, getFirstMarkValue, getNextMarkValue, getPreviousMarkValue } from '../utils/get-step-mark-value/get-step-mark-value.mjs';\nimport classes from '../Slider.module.css.mjs';\nconst defaultProps = {\n  radius: \"xl\",\n  min: 0,\n  max: 100,\n  step: 1,\n  marks: [],\n  label: f => f,\n  labelTransitionProps: {\n    transition: \"fade\",\n    duration: 0\n  },\n  thumbLabel: \"\",\n  showLabelOnHover: true,\n  scale: v => v,\n  size: \"md\"\n};\nconst varsResolver = createVarsResolver((theme, {\n  size,\n  color,\n  thumbSize,\n  radius\n}) => ({\n  root: {\n    \"--slider-size\": getSize(size, \"slider-size\"),\n    \"--slider-color\": color ? getThemeColor(color, theme) : void 0,\n    \"--slider-radius\": radius === void 0 ? void 0 : getRadius(radius),\n    \"--slider-thumb-size\": thumbSize !== void 0 ? rem(thumbSize) : \"calc(var(--slider-size) * 2)\"\n  }\n}));\nconst Slider = factory((_props, ref) => {\n  const props = useProps(\"Slider\", defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    value,\n    onChange,\n    onChangeEnd,\n    size,\n    min,\n    max,\n    domain,\n    step,\n    precision: _precision,\n    defaultValue,\n    name,\n    marks,\n    label,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbLabel,\n    showLabelOnHover,\n    thumbChildren,\n    disabled,\n    unstyled,\n    scale,\n    inverted,\n    className,\n    style,\n    vars,\n    hiddenInputProps,\n    restrictToMarks,\n    thumbProps,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Slider\",\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    vars,\n    varsResolver,\n    unstyled\n  });\n  const {\n    dir\n  } = useDirection();\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled({\n    value: typeof value === \"number\" ? clamp(value, min, max) : value,\n    defaultValue: typeof defaultValue === \"number\" ? clamp(defaultValue, min, max) : defaultValue,\n    finalValue: clamp(0, min, max),\n    onChange\n  });\n  const valueRef = useRef(_value);\n  const onChangeEndRef = useRef(onChangeEnd);\n  useEffect(() => {\n    onChangeEndRef.current = onChangeEnd;\n  }, [onChangeEnd]);\n  const root = useRef(null);\n  const thumb = useRef(null);\n  const [domainMin, domainMax] = domain || [min, max];\n  const position = getPosition({\n    value: _value,\n    min: domainMin,\n    max: domainMax\n  });\n  const scaledValue = scale(_value);\n  const _label = typeof label === \"function\" ? label(scaledValue) : label;\n  const precision = _precision ?? getPrecision(step);\n  const handleChange = useCallback(({\n    x\n  }) => {\n    if (!disabled) {\n      const nextValue = getChangeValue({\n        value: x,\n        min: domainMin,\n        max: domainMax,\n        step,\n        precision\n      });\n      const clampedValue = clamp(nextValue, min, max);\n      setValue(restrictToMarks && marks?.length ? findClosestNumber(clampedValue, marks.map(mark => mark.value)) : clampedValue);\n      valueRef.current = clampedValue;\n    }\n  }, [disabled, min, max, domainMin, domainMax, step, precision, setValue, marks, restrictToMarks]);\n  const handleScrubEnd = useCallback(() => {\n    if (!disabled && onChangeEndRef.current) {\n      const finalValue = restrictToMarks && marks?.length ? findClosestNumber(valueRef.current, marks.map(mark => mark.value)) : valueRef.current;\n      onChangeEndRef.current(finalValue);\n    }\n  }, [disabled, marks, restrictToMarks]);\n  const {\n    ref: container,\n    active\n  } = useMove(handleChange, {\n    onScrubEnd: handleScrubEnd\n  }, dir);\n  const callOnChangeEnd = useCallback(value2 => {\n    if (!disabled && onChangeEndRef.current) {\n      onChangeEndRef.current(value2);\n    }\n  }, [disabled]);\n  const handleTrackKeydownCapture = event => {\n    if (!disabled) {\n      switch (event.key) {\n        case \"ArrowUp\":\n          {\n            event.preventDefault();\n            thumb.current?.focus();\n            if (restrictToMarks && marks) {\n              const nextValue2 = getNextMarkValue(_value, marks);\n              setValue(nextValue2);\n              callOnChangeEnd(nextValue2);\n              break;\n            }\n            const nextValue = getFloatingValue(Math.min(Math.max(_value + step, min), max), precision);\n            setValue(nextValue);\n            callOnChangeEnd(nextValue);\n            break;\n          }\n        case \"ArrowRight\":\n          {\n            event.preventDefault();\n            thumb.current?.focus();\n            if (restrictToMarks && marks) {\n              const nextValue2 = dir === \"rtl\" ? getPreviousMarkValue(_value, marks) : getNextMarkValue(_value, marks);\n              setValue(nextValue2);\n              callOnChangeEnd(nextValue2);\n              break;\n            }\n            const nextValue = getFloatingValue(Math.min(Math.max(dir === \"rtl\" ? _value - step : _value + step, min), max), precision);\n            setValue(nextValue);\n            callOnChangeEnd(nextValue);\n            break;\n          }\n        case \"ArrowDown\":\n          {\n            event.preventDefault();\n            thumb.current?.focus();\n            if (restrictToMarks && marks) {\n              const nextValue2 = getPreviousMarkValue(_value, marks);\n              setValue(nextValue2);\n              callOnChangeEnd(nextValue2);\n              break;\n            }\n            const nextValue = getFloatingValue(Math.min(Math.max(_value - step, min), max), precision);\n            setValue(nextValue);\n            callOnChangeEnd(nextValue);\n            break;\n          }\n        case \"ArrowLeft\":\n          {\n            event.preventDefault();\n            thumb.current?.focus();\n            if (restrictToMarks && marks) {\n              const nextValue2 = dir === \"rtl\" ? getNextMarkValue(_value, marks) : getPreviousMarkValue(_value, marks);\n              setValue(nextValue2);\n              callOnChangeEnd(nextValue2);\n              break;\n            }\n            const nextValue = getFloatingValue(Math.min(Math.max(dir === \"rtl\" ? _value + step : _value - step, min), max), precision);\n            setValue(nextValue);\n            callOnChangeEnd(nextValue);\n            break;\n          }\n        case \"Home\":\n          {\n            event.preventDefault();\n            thumb.current?.focus();\n            if (restrictToMarks && marks) {\n              setValue(getFirstMarkValue(marks));\n              callOnChangeEnd(getFirstMarkValue(marks));\n              break;\n            }\n            setValue(min);\n            callOnChangeEnd(min);\n            break;\n          }\n        case \"End\":\n          {\n            event.preventDefault();\n            thumb.current?.focus();\n            if (restrictToMarks && marks) {\n              setValue(getLastMarkValue(marks));\n              callOnChangeEnd(getLastMarkValue(marks));\n              break;\n            }\n            setValue(max);\n            callOnChangeEnd(max);\n            break;\n          }\n      }\n    }\n  };\n  return /* @__PURE__ */jsx(SliderProvider, {\n    value: {\n      getStyles\n    },\n    children: /* @__PURE__ */jsxs(SliderRoot, {\n      ...others,\n      ref: useMergedRef(ref, root),\n      onKeyDownCapture: handleTrackKeydownCapture,\n      onMouseDownCapture: () => root.current?.focus(),\n      size,\n      disabled,\n      children: [/* @__PURE__ */jsx(Track, {\n        inverted,\n        offset: 0,\n        filled: position,\n        marks,\n        min: domainMin,\n        max: domainMax,\n        value: scaledValue,\n        disabled,\n        containerProps: {\n          ref: container,\n          onMouseEnter: showLabelOnHover ? () => setHovered(true) : void 0,\n          onMouseLeave: showLabelOnHover ? () => setHovered(false) : void 0\n        },\n        children: /* @__PURE__ */jsx(Thumb, {\n          max: domainMax,\n          min: domainMin,\n          value: scaledValue,\n          position,\n          dragging: active,\n          label: _label,\n          ref: thumb,\n          labelTransitionProps,\n          labelAlwaysOn,\n          thumbLabel,\n          showLabelOnHover,\n          isHovered: hovered,\n          disabled,\n          ...thumbProps,\n          children: thumbChildren\n        })\n      }), /* @__PURE__ */jsx(\"input\", {\n        type: \"hidden\",\n        name,\n        value: scaledValue,\n        ...hiddenInputProps\n      })]\n    })\n  });\n});\nSlider.classes = classes;\nSlider.displayName = \"@mantine/core/Slider\";\nexport { Slider };","map":{"version":3,"names":["defaultProps","radius","min","max","step","marks","label","f","labelTransitionProps","transition","duration","thumbLabel","showLabelOnHover","scale","v","size","varsResolver","createVarsResolver","theme","color","thumbSize","root","getSize","getThemeColor","getRadius","rem","Slider","factory","_props","ref","props","useProps","classNames","styles","value","onChange","onChangeEnd","domain","precision","_precision","defaultValue","name","labelAlwaysOn","thumbChildren","disabled","unstyled","inverted","className","style","vars","hiddenInputProps","restrictToMarks","thumbProps","others","getStyles","useStyles","classes","dir","useDirection","hovered","setHovered","useState","_value","setValue","useUncontrolled","clamp","finalValue","valueRef","useRef","onChangeEndRef","useEffect","current","thumb","domainMin","domainMax","position","getPosition","scaledValue","_label","getPrecision","handleChange","useCallback","x","nextValue","getChangeValue","clampedValue","length","findClosestNumber","map","mark","handleScrubEnd","container","active","useMove","onScrubEnd","callOnChangeEnd","value2","handleTrackKeydownCapture","event","key","preventDefault","focus","nextValue2","getNextMarkValue","getFloatingValue","Math","getPreviousMarkValue","getFirstMarkValue","getLastMarkValue","jsx","SliderProvider","children","jsxs","SliderRoot","useMergedRef","onKeyDownCapture","onMouseDownCapture","Track","offset","filled","containerProps","onMouseEnter","onMouseLeave","Thumb","dragging","isHovered","type","displayName"],"sources":["C:\\IVOSIS\\IvosisProjectManagement\\frontend\\node_modules\\@mantine\\core\\src\\components\\Slider\\Slider\\Slider.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { clamp, useMergedRef, useMove, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  findClosestNumber,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  rem,\n  StylesApiProps,\n  useDirection,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { TransitionOverride } from '../../Transition';\nimport { SliderCssVariables, SliderProvider, SliderStylesNames } from '../Slider.context';\nimport { SliderRoot } from '../SliderRoot/SliderRoot';\nimport { Thumb } from '../Thumb/Thumb';\nimport { Track } from '../Track/Track';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value';\nimport { getPosition } from '../utils/get-position/get-position';\nimport { getPrecision } from '../utils/get-precision/get-precision';\nimport {\n  getFirstMarkValue,\n  getLastMarkValue,\n  getNextMarkValue,\n  getPreviousMarkValue,\n} from '../utils/get-step-mark-value/get-step-mark-value';\nimport classes from '../Slider.module.css';\n\nexport interface SliderProps\n  extends BoxProps,\n    StylesApiProps<SliderFactory>,\n    ElementProps<'div', 'onChange'> {\n  /** Key of `theme.colors` or any valid CSS color, controls color of track and thumb, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, numbers are converted to rem, `'xl'` by default */\n  radius?: MantineRadius;\n\n  /** Controls size of the track, `'md'` by default */\n  size?: MantineSize | (string & {}) | number;\n\n  /** Minimal possible value, `0` by default */\n  min?: number;\n\n  /** Maximum possible value, `100` by default */\n  max?: number;\n\n  /** Domain of the slider, defines the full range of possible values, `[min, max]` by default */\n  domain?: [number, number];\n\n  /** Number by which value will be incremented/decremented with thumb drag and arrows, `1` by default */\n  step?: number;\n\n  /** Number of significant digits after the decimal point */\n  precision?: number;\n\n  /** Controlled component value */\n  value?: number;\n\n  /** Uncontrolled component default value */\n  defaultValue?: number;\n\n  /** Called when value changes */\n  onChange?: (value: number) => void;\n\n  /** Called when user stops dragging slider or changes value with arrows */\n  onChangeEnd?: (value: number) => void;\n\n  /** Hidden input name, use with uncontrolled component */\n  name?: string;\n\n  /** Marks displayed on the track */\n  marks?: { value: number; label?: React.ReactNode }[];\n\n  /** Function to generate label or any react node to render instead, set to null to disable label */\n  label?: React.ReactNode | ((value: number) => React.ReactNode);\n\n  /** Props passed down to the `Transition` component, `{ transition: 'fade', duration: 0 }` by default */\n  labelTransitionProps?: TransitionOverride;\n\n  /** Determines whether the label should be visible when the slider is not being dragged or hovered, `false` by default */\n  labelAlwaysOn?: boolean;\n\n  /** Thumb `aria-label` */\n  thumbLabel?: string;\n\n  /** Determines whether the label should be displayed when the slider is hovered, `true` by default */\n  showLabelOnHover?: boolean;\n\n  /** Content rendered inside thumb */\n  thumbChildren?: React.ReactNode;\n\n  /** Disables slider */\n  disabled?: boolean;\n\n  /** Thumb `width` and `height`, by default value is computed based on `size` prop */\n  thumbSize?: number | string;\n\n  /** A transformation function to change the scale of the slider */\n  scale?: (value: number) => number;\n\n  /** Determines whether track value representation should be inverted, `false` by default */\n  inverted?: boolean;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: React.ComponentPropsWithoutRef<'input'>;\n\n  /** Determines whether the selection should be only allowed from the given marks array, `false` by default */\n  restrictToMarks?: boolean;\n\n  /** Props passed down to thumb element */\n  thumbProps?: React.ComponentPropsWithoutRef<'div'>;\n}\n\nexport type SliderFactory = Factory<{\n  props: SliderProps;\n  ref: HTMLDivElement;\n  stylesNames: SliderStylesNames;\n  vars: SliderCssVariables;\n}>;\n\nconst defaultProps = {\n  radius: 'xl',\n  min: 0,\n  max: 100,\n  step: 1,\n  marks: [],\n  label: (f) => f,\n  labelTransitionProps: { transition: 'fade', duration: 0 },\n  thumbLabel: '',\n  showLabelOnHover: true,\n  scale: (v) => v,\n  size: 'md',\n} satisfies Partial<SliderProps>;\n\nconst varsResolver = createVarsResolver<SliderFactory>(\n  (theme, { size, color, thumbSize, radius }) => ({\n    root: {\n      '--slider-size': getSize(size, 'slider-size'),\n      '--slider-color': color ? getThemeColor(color, theme) : undefined,\n      '--slider-radius': radius === undefined ? undefined : getRadius(radius),\n      '--slider-thumb-size':\n        thumbSize !== undefined ? rem(thumbSize) : 'calc(var(--slider-size) * 2)',\n    },\n  })\n);\n\nexport const Slider = factory<SliderFactory>((_props, ref) => {\n  const props = useProps('Slider', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    value,\n    onChange,\n    onChangeEnd,\n    size,\n    min,\n    max,\n    domain,\n    step,\n    precision: _precision,\n    defaultValue,\n    name,\n    marks,\n    label,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbLabel,\n    showLabelOnHover,\n    thumbChildren,\n    disabled,\n    unstyled,\n    scale,\n    inverted,\n    className,\n    style,\n    vars,\n    hiddenInputProps,\n    restrictToMarks,\n    thumbProps,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SliderFactory>({\n    name: 'Slider',\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    vars,\n    varsResolver,\n    unstyled,\n  });\n\n  const { dir } = useDirection();\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled({\n    value: typeof value === 'number' ? clamp(value, min, max) : value,\n    defaultValue: typeof defaultValue === 'number' ? clamp(defaultValue, min, max) : defaultValue,\n    finalValue: clamp(0, min, max),\n    onChange,\n  });\n\n  const valueRef = useRef(_value);\n  const onChangeEndRef = useRef(onChangeEnd);\n\n  useEffect(() => {\n    onChangeEndRef.current = onChangeEnd;\n  }, [onChangeEnd]);\n\n  const root = useRef<HTMLDivElement>(null);\n  const thumb = useRef<HTMLDivElement>(null);\n  const [domainMin, domainMax] = domain || [min, max];\n  const position = getPosition({ value: _value, min: domainMin, max: domainMax });\n  const scaledValue = scale!(_value);\n  const _label = typeof label === 'function' ? label(scaledValue) : label;\n  const precision = _precision ?? getPrecision(step);\n\n  const handleChange = useCallback(\n    ({ x }: { x: number }) => {\n      if (!disabled) {\n        const nextValue = getChangeValue({\n          value: x,\n          min: domainMin,\n          max: domainMax,\n          step,\n          precision,\n        });\n        const clampedValue = clamp(nextValue, min!, max!);\n        setValue(\n          restrictToMarks && marks?.length\n            ? findClosestNumber(\n                clampedValue,\n                marks.map((mark) => mark.value)\n              )\n            : clampedValue\n        );\n        valueRef.current = clampedValue;\n      }\n    },\n    [disabled, min, max, domainMin, domainMax, step, precision, setValue, marks, restrictToMarks]\n  );\n\n  const handleScrubEnd = useCallback(() => {\n    if (!disabled && onChangeEndRef.current) {\n      const finalValue =\n        restrictToMarks && marks?.length\n          ? findClosestNumber(\n              valueRef.current,\n              marks.map((mark) => mark.value)\n            )\n          : valueRef.current;\n      onChangeEndRef.current(finalValue);\n    }\n  }, [disabled, marks, restrictToMarks]);\n\n  const { ref: container, active } = useMove(handleChange, { onScrubEnd: handleScrubEnd }, dir);\n\n  const callOnChangeEnd = useCallback(\n    (value: number) => {\n      if (!disabled && onChangeEndRef.current) {\n        onChangeEndRef.current(value);\n      }\n    },\n    [disabled]\n  );\n\n  const handleTrackKeydownCapture = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (!disabled) {\n      switch (event.key) {\n        case 'ArrowUp': {\n          event.preventDefault();\n          thumb.current?.focus();\n\n          if (restrictToMarks && marks) {\n            const nextValue = getNextMarkValue(_value, marks);\n            setValue(nextValue);\n            callOnChangeEnd(nextValue);\n            break;\n          }\n\n          const nextValue = getFloatingValue(\n            Math.min(Math.max(_value + step, min), max),\n            precision\n          );\n          setValue(nextValue);\n          callOnChangeEnd(nextValue);\n          break;\n        }\n\n        case 'ArrowRight': {\n          event.preventDefault();\n          thumb.current?.focus();\n\n          if (restrictToMarks && marks) {\n            const nextValue =\n              dir === 'rtl' ? getPreviousMarkValue(_value, marks) : getNextMarkValue(_value, marks);\n            setValue(nextValue);\n            callOnChangeEnd(nextValue);\n            break;\n          }\n\n          const nextValue = getFloatingValue(\n            Math.min(Math.max(dir === 'rtl' ? _value - step : _value + step, min), max),\n            precision\n          );\n          setValue(nextValue);\n          callOnChangeEnd(nextValue);\n          break;\n        }\n\n        case 'ArrowDown': {\n          event.preventDefault();\n          thumb.current?.focus();\n\n          if (restrictToMarks && marks) {\n            const nextValue = getPreviousMarkValue(_value, marks);\n            setValue(nextValue);\n            callOnChangeEnd(nextValue);\n            break;\n          }\n\n          const nextValue = getFloatingValue(\n            Math.min(Math.max(_value - step, min), max),\n            precision\n          );\n          setValue(nextValue);\n          callOnChangeEnd(nextValue);\n          break;\n        }\n\n        case 'ArrowLeft': {\n          event.preventDefault();\n          thumb.current?.focus();\n\n          if (restrictToMarks && marks) {\n            const nextValue =\n              dir === 'rtl' ? getNextMarkValue(_value, marks) : getPreviousMarkValue(_value, marks);\n            setValue(nextValue);\n            callOnChangeEnd(nextValue);\n            break;\n          }\n\n          const nextValue = getFloatingValue(\n            Math.min(Math.max(dir === 'rtl' ? _value + step : _value - step, min), max),\n            precision\n          );\n          setValue(nextValue);\n          callOnChangeEnd(nextValue);\n          break;\n        }\n\n        case 'Home': {\n          event.preventDefault();\n          thumb.current?.focus();\n\n          if (restrictToMarks && marks) {\n            setValue(getFirstMarkValue(marks));\n            callOnChangeEnd(getFirstMarkValue(marks));\n            break;\n          }\n\n          setValue(min);\n          callOnChangeEnd(min);\n          break;\n        }\n\n        case 'End': {\n          event.preventDefault();\n          thumb.current?.focus();\n\n          if (restrictToMarks && marks) {\n            setValue(getLastMarkValue(marks));\n            callOnChangeEnd(getLastMarkValue(marks));\n            break;\n          }\n\n          setValue(max);\n          callOnChangeEnd(max);\n          break;\n        }\n\n        default: {\n          break;\n        }\n      }\n    }\n  };\n\n  return (\n    <SliderProvider value={{ getStyles }}>\n      <SliderRoot\n        {...others}\n        ref={useMergedRef(ref, root)}\n        onKeyDownCapture={handleTrackKeydownCapture}\n        onMouseDownCapture={() => root.current?.focus()}\n        size={size}\n        disabled={disabled}\n      >\n        <Track\n          inverted={inverted}\n          offset={0}\n          filled={position}\n          marks={marks}\n          min={domainMin}\n          max={domainMax}\n          value={scaledValue}\n          disabled={disabled}\n          containerProps={{\n            ref: container,\n            onMouseEnter: showLabelOnHover ? () => setHovered(true) : undefined,\n            onMouseLeave: showLabelOnHover ? () => setHovered(false) : undefined,\n          }}\n        >\n          <Thumb\n            max={domainMax}\n            min={domainMin}\n            value={scaledValue}\n            position={position}\n            dragging={active}\n            label={_label}\n            ref={thumb as any}\n            labelTransitionProps={labelTransitionProps}\n            labelAlwaysOn={labelAlwaysOn}\n            thumbLabel={thumbLabel}\n            showLabelOnHover={showLabelOnHover}\n            isHovered={hovered}\n            disabled={disabled}\n            {...thumbProps}\n          >\n            {thumbChildren}\n          </Thumb>\n        </Track>\n\n        <input type=\"hidden\" name={name} value={scaledValue} {...hiddenInputProps} />\n      </SliderRoot>\n    </SliderProvider>\n  );\n});\n\nSlider.classes = classes;\nSlider.displayName = '@mantine/core/Slider';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}