{"ast":null,"code":"'use client';\n\nimport { useRef, useEffect, useMemo } from 'react';\nfunction useLongPress(onLongPress, options = {}) {\n  const {\n    threshold = 400,\n    onStart,\n    onFinish,\n    onCancel\n  } = options;\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timeout = useRef(-1);\n  useEffect(() => () => window.clearTimeout(timeout.current), []);\n  return useMemo(() => {\n    if (typeof onLongPress !== \"function\") {\n      return {};\n    }\n    const start = event => {\n      if (!isMouseEvent(event) && !isTouchEvent(event)) {\n        return;\n      }\n      if (onStart) {\n        onStart(event);\n      }\n      isPressed.current = true;\n      timeout.current = window.setTimeout(() => {\n        onLongPress(event);\n        isLongPressActive.current = true;\n      }, threshold);\n    };\n    const cancel = event => {\n      if (!isMouseEvent(event) && !isTouchEvent(event)) {\n        return;\n      }\n      if (isLongPressActive.current) {\n        if (onFinish) {\n          onFinish(event);\n        }\n      } else if (isPressed.current) {\n        if (onCancel) {\n          onCancel(event);\n        }\n      }\n      isLongPressActive.current = false;\n      isPressed.current = false;\n      if (timeout.current) {\n        window.clearTimeout(timeout.current);\n      }\n    };\n    return {\n      onMouseDown: start,\n      onMouseUp: cancel,\n      onMouseLeave: cancel,\n      onTouchStart: start,\n      onTouchEnd: cancel\n    };\n  }, [onLongPress, threshold, onCancel, onFinish, onStart]);\n}\nfunction isTouchEvent(event) {\n  return window.TouchEvent ? event.nativeEvent instanceof TouchEvent : \"touches\" in event.nativeEvent;\n}\nfunction isMouseEvent(event) {\n  return event.nativeEvent instanceof MouseEvent;\n}\nexport { useLongPress };","map":{"version":3,"names":["useLongPress","onLongPress","options","threshold","onStart","onFinish","onCancel","isLongPressActive","useRef","isPressed","timeout","useEffect","window","clearTimeout","current","useMemo","start","event","isMouseEvent","isTouchEvent","setTimeout","cancel","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","TouchEvent","nativeEvent","MouseEvent"],"sources":["C:\\IVOSIS\\IvosisProjectManagement\\frontend\\node_modules\\@mantine\\hooks\\src\\use-long-press\\use-long-press.ts"],"sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\n\nexport interface UseLongPressOptions {\n  /** Time in milliseconds to trigger the long press, default is 400ms */\n  threshold?: number;\n\n  /** Callback triggered when the long press starts */\n  onStart?: (event: React.MouseEvent | React.TouchEvent) => void;\n\n  /** Callback triggered when the long press finishes */\n  onFinish?: (event: React.MouseEvent | React.TouchEvent) => void;\n\n  /** Callback triggered when the long press is canceled */\n  onCancel?: (event: React.MouseEvent | React.TouchEvent) => void;\n}\n\nexport interface UseLongPressReturnValue {\n  onMouseDown: (event: React.MouseEvent) => void;\n  onMouseUp: (event: React.MouseEvent) => void;\n  onMouseLeave: (event: React.MouseEvent) => void;\n  onTouchStart: (event: React.TouchEvent) => void;\n  onTouchEnd: (event: React.TouchEvent) => void;\n}\n\nexport function useLongPress(\n  onLongPress: (event: React.MouseEvent | React.TouchEvent) => void,\n  options: UseLongPressOptions = {}\n): UseLongPressReturnValue {\n  const { threshold = 400, onStart, onFinish, onCancel } = options;\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timeout = useRef<number>(-1);\n\n  useEffect(() => () => window.clearTimeout(timeout.current), []);\n\n  return useMemo(() => {\n    if (typeof onLongPress !== 'function') {\n      return {} as UseLongPressReturnValue;\n    }\n\n    const start = (event: React.MouseEvent | React.TouchEvent) => {\n      if (!isMouseEvent(event) && !isTouchEvent(event)) {\n        return;\n      }\n\n      if (onStart) {\n        onStart(event);\n      }\n\n      isPressed.current = true;\n      timeout.current = window.setTimeout(() => {\n        onLongPress(event);\n        isLongPressActive.current = true;\n      }, threshold);\n    };\n\n    const cancel = (event: React.MouseEvent | React.TouchEvent) => {\n      if (!isMouseEvent(event) && !isTouchEvent(event)) {\n        return;\n      }\n\n      if (isLongPressActive.current) {\n        if (onFinish) {\n          onFinish(event);\n        }\n      } else if (isPressed.current) {\n        if (onCancel) {\n          onCancel(event);\n        }\n      }\n\n      isLongPressActive.current = false;\n      isPressed.current = false;\n\n      if (timeout.current) {\n        window.clearTimeout(timeout.current);\n      }\n    };\n\n    return {\n      onMouseDown: start,\n      onMouseUp: cancel,\n      onMouseLeave: cancel,\n      onTouchStart: start,\n      onTouchEnd: cancel,\n    };\n  }, [onLongPress, threshold, onCancel, onFinish, onStart]);\n}\n\nfunction isTouchEvent(event: React.MouseEvent | React.TouchEvent): event is React.TouchEvent {\n  return window.TouchEvent\n    ? event.nativeEvent instanceof TouchEvent\n    : 'touches' in event.nativeEvent;\n}\n\nfunction isMouseEvent(event: React.MouseEvent | React.TouchEvent): event is React.MouseEvent {\n  return event.nativeEvent instanceof MouseEvent;\n}\n"],"mappings":";;;AAwBO,SAASA,YACdA,CAAAC,WAAA,EACAC,OAA+B,KACN;EACzB,MAAM;IAAEC,SAAY;IAAKC,OAAS;IAAAC,QAAA;IAAUC;EAAA,CAAa,GAAAJ,OAAA;EACnD,MAAAK,iBAAA,GAAoBC,MAAA,CAAO,KAAK;EAChC,MAAAC,SAAA,GAAYD,MAAA,CAAO,KAAK;EACxB,MAAAE,OAAA,GAAUF,MAAA,CAAe,CAAE;EAEvBG,SAAA,OAAM,MAAMC,MAAO,CAAAC,YAAA,CAAaH,OAAA,CAAQI,OAAO,GAAG,EAAE;EAE9D,OAAOC,OAAA,CAAQ,MAAM;IACf,WAAOd,WAAA,KAAgB,UAAY;MACrC,OAAO,CAAC;IAAA;IAGJ,MAAAe,KAAA,GAASC,KAA+C;MAC5D,IAAI,CAACC,YAAa,CAAAD,KAAK,KAAK,CAACE,YAAA,CAAaF,KAAK,CAAG;QAChD;MAAA;MAGF,IAAIb,OAAS;QACXA,OAAA,CAAQa,KAAK;MAAA;MAGfR,SAAA,CAAUK,OAAU;MACZJ,OAAA,CAAAI,OAAA,GAAUF,MAAO,CAAAQ,UAAA,CAAW,MAAM;QACxCnB,WAAA,CAAYgB,KAAK;QACjBV,iBAAA,CAAkBO,OAAU;MAAA,GAC3BX,SAAS;IACd;IAEM,MAAAkB,MAAA,GAAUJ,KAA+C;MAC7D,IAAI,CAACC,YAAa,CAAAD,KAAK,KAAK,CAACE,YAAA,CAAaF,KAAK,CAAG;QAChD;MAAA;MAGF,IAAIV,iBAAA,CAAkBO,OAAS;QAC7B,IAAIT,QAAU;UACZA,QAAA,CAASY,KAAK;QAAA;MAChB,CACF,UAAWR,SAAA,CAAUK,OAAS;QAC5B,IAAIR,QAAU;UACZA,QAAA,CAASW,KAAK;QAAA;MAChB;MAGFV,iBAAA,CAAkBO,OAAU;MAC5BL,SAAA,CAAUK,OAAU;MAEpB,IAAIJ,OAAA,CAAQI,OAAS;QACZF,MAAA,CAAAC,YAAA,CAAaH,OAAA,CAAQI,OAAO;MAAA;IAEvC;IAEO;MACLQ,WAAa,EAAAN,KAAA;MACbO,SAAW,EAAAF,MAAA;MACXG,YAAc,EAAAH,MAAA;MACdI,YAAc,EAAAT,KAAA;MACdU,UAAY,EAAAL;IACd;EAAA,GACC,CAACpB,WAAA,EAAaE,SAAA,EAAWG,QAAU,EAAAD,QAAA,EAAUD,OAAO,CAAC;AAC1D;AAEA,SAASe,aAAaF,KAAuE;EAC3F,OAAOL,MAAA,CAAOe,UACV,GAAAV,KAAA,CAAMW,WAAuB,YAAAD,UAAA,GAC7B,aAAaV,KAAM,CAAAW,WAAA;AACzB;AAEA,SAASV,aAAaD,KAAuE;EAC3F,OAAOA,KAAA,CAAMW,WAAuB,YAAAC,UAAA;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}