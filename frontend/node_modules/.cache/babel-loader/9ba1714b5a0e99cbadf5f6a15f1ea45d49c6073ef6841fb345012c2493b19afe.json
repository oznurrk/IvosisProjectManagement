{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nfunction useClipboard(options = {\n  timeout: 2e3\n}) {\n  const [error, setError] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n  const handleCopyResult = value => {\n    window.clearTimeout(copyTimeout);\n    setCopyTimeout(window.setTimeout(() => setCopied(false), options.timeout));\n    setCopied(value);\n  };\n  const copy = value => {\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(value).then(() => handleCopyResult(true)).catch(err => setError(err));\n    } else {\n      setError(new Error(\"useClipboard: navigator.clipboard is not supported\"));\n    }\n  };\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    window.clearTimeout(copyTimeout);\n  };\n  return {\n    copy,\n    reset,\n    error,\n    copied\n  };\n}\nexport { useClipboard };","map":{"version":3,"names":["useClipboard","options","timeout","error","setError","useState","copied","setCopied","copyTimeout","setCopyTimeout","handleCopyResult","value","window","clearTimeout","setTimeout","copy","navigator","clipboard","writeText","then","catch","err","Error","reset"],"sources":["C:\\IVOSIS\\IvosisProjectManagement\\frontend\\node_modules\\@mantine\\hooks\\src\\use-clipboard\\use-clipboard.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport interface UseClipboardOptions {\n  /** Time in ms after which the copied state will reset, `2000` by default */\n  timeout?: number;\n}\n\nexport interface UseClipboardReturnValue {\n  /** Function to copy value to clipboard */\n  copy: (value: any) => void;\n\n  /** Function to reset copied state and error */\n  reset: () => void;\n\n  /** Error if copying failed */\n  error: Error | null;\n\n  /** Boolean indicating if the value was copied successfully */\n  copied: boolean;\n}\n\nexport function useClipboard(\n  options: UseClipboardOptions = { timeout: 2000 }\n): UseClipboardReturnValue {\n  const [error, setError] = useState<Error | null>(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState<number | null>(null);\n\n  const handleCopyResult = (value: boolean) => {\n    window.clearTimeout(copyTimeout!);\n    setCopyTimeout(window.setTimeout(() => setCopied(false), options.timeout));\n    setCopied(value);\n  };\n\n  const copy = (value: any) => {\n    if ('clipboard' in navigator) {\n      navigator.clipboard\n        .writeText(value)\n        .then(() => handleCopyResult(true))\n        .catch((err) => setError(err));\n    } else {\n      setError(new Error('useClipboard: navigator.clipboard is not supported'));\n    }\n  };\n\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    window.clearTimeout(copyTimeout!);\n  };\n\n  return { copy, reset, error, copied };\n}\n"],"mappings":";;;AAqBO,SAASA,YACdA,CAAAC,OAAA,GAA+B;EAAEC,OAAA,EAAS;AAAA,CACjB;EACzB,MAAM,CAACC,KAAA,EAAOC,QAAQ,IAAIC,QAAA,CAAuB,IAAI;EACrD,MAAM,CAACC,MAAA,EAAQC,SAAS,IAAIF,QAAA,CAAS,KAAK;EAC1C,MAAM,CAACG,WAAA,EAAaC,cAAc,IAAIJ,QAAA,CAAwB,IAAI;EAE5D,MAAAK,gBAAA,GAAoBC,KAAmB;IAC3CC,MAAA,CAAOC,YAAA,CAAaL,WAAY;IACjBC,cAAA,CAAAG,MAAA,CAAOE,UAAA,CAAW,MAAMP,SAAA,CAAU,KAAK,CAAG,EAAAN,OAAA,CAAQC,OAAO,CAAC;IACzEK,SAAA,CAAUI,KAAK;EACjB;EAEM,MAAAI,IAAA,GAAQJ,KAAe;IAC3B,IAAI,eAAeK,SAAW;MAC5BA,SAAA,CAAUC,SACP,CAAAC,SAAA,CAAUP,KAAK,EACfQ,IAAA,CAAK,MAAMT,gBAAA,CAAiB,IAAI,CAAC,EACjCU,KAAM,CAACC,GAAQ,IAAAjB,QAAA,CAASiB,GAAG,CAAC;IAAA,CAC1B;MACIjB,QAAA,KAAIkB,KAAM,qDAAoD,CAAC;IAAA;EAE5E;EAEA,MAAMC,KAAA,GAAQA,CAAA,KAAM;IAClBhB,SAAA,CAAU,KAAK;IACfH,QAAA,CAAS,IAAI;IACbQ,MAAA,CAAOC,YAAA,CAAaL,WAAY;EAClC;EAEA,OAAO;IAAEO,IAAA;IAAMQ,KAAO;IAAApB,KAAA;IAAOG;EAAO;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}