{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback, useEffect } from 'react';\nfunction containsRelatedTarget(event) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n  return false;\n}\nfunction useFocusWithin({\n  onBlur,\n  onFocus\n} = {}) {\n  const [focused, setFocused] = useState(false);\n  const focusedRef = useRef(false);\n  const previousNode = useRef(null);\n  const _setFocused = useCallback(value => {\n    setFocused(value);\n    focusedRef.current = value;\n  }, []);\n  const handleFocusIn = useCallback(event => {\n    if (!focusedRef.current) {\n      _setFocused(true);\n      onFocus?.(event);\n    }\n  }, [onFocus]);\n  const handleFocusOut = useCallback(event => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      _setFocused(false);\n      onBlur?.(event);\n    }\n  }, [onBlur]);\n  const callbackRef = useCallback(node => {\n    if (!node) {\n      return;\n    }\n    if (previousNode.current) {\n      previousNode.current.removeEventListener(\"focusin\", handleFocusIn);\n      previousNode.current.removeEventListener(\"focusout\", handleFocusOut);\n    }\n    node.addEventListener(\"focusin\", handleFocusIn);\n    node.addEventListener(\"focusout\", handleFocusOut);\n  }, [handleFocusIn, handleFocusOut]);\n  useEffect(() => () => {\n    if (previousNode.current) {\n      previousNode.current.removeEventListener(\"focusin\", handleFocusIn);\n      previousNode.current.removeEventListener(\"focusout\", handleFocusOut);\n    }\n  }, []);\n  return {\n    ref: callbackRef,\n    focused\n  };\n}\nexport { useFocusWithin };","map":{"version":3,"names":["containsRelatedTarget","event","currentTarget","HTMLElement","relatedTarget","contains","useFocusWithin","onBlur","onFocus","focused","setFocused","useState","focusedRef","useRef","previousNode","_setFocused","useCallback","value","current","handleFocusIn","handleFocusOut","callbackRef","node","removeEventListener","addEventListener","useEffect","ref"],"sources":["C:\\Users\\Asus\\Desktop\\Ivosis\\IvosisProjectManagement\\frontend\\node_modules\\@mantine\\hooks\\src\\use-focus-within\\use-focus-within.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nfunction containsRelatedTarget(event: FocusEvent) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nexport interface UseFocusWithinOptions {\n  onFocus?: (event: FocusEvent) => void;\n  onBlur?: (event: FocusEvent) => void;\n}\n\nexport interface UseFocusWithinReturnValue<T extends HTMLElement = any> {\n  ref: React.RefCallback<T | null>;\n  focused: boolean;\n}\n\nexport function useFocusWithin<T extends HTMLElement = any>({\n  onBlur,\n  onFocus,\n}: UseFocusWithinOptions = {}): UseFocusWithinReturnValue<T> {\n  const [focused, setFocused] = useState(false);\n  const focusedRef = useRef(false);\n  const previousNode = useRef<T | null>(null);\n\n  const _setFocused = useCallback((value: boolean) => {\n    setFocused(value);\n    focusedRef.current = value;\n  }, []);\n\n  const handleFocusIn = useCallback(\n    (event: FocusEvent) => {\n      if (!focusedRef.current) {\n        _setFocused(true);\n        onFocus?.(event);\n      }\n    },\n    [onFocus]\n  );\n\n  const handleFocusOut = useCallback(\n    (event: FocusEvent) => {\n      if (focusedRef.current && !containsRelatedTarget(event)) {\n        _setFocused(false);\n        onBlur?.(event);\n      }\n    },\n    [onBlur]\n  );\n\n  const callbackRef: React.RefCallback<T | null> = useCallback(\n    (node) => {\n      if (!node) {\n        return;\n      }\n\n      if (previousNode.current) {\n        previousNode.current.removeEventListener('focusin', handleFocusIn);\n        previousNode.current.removeEventListener('focusout', handleFocusOut);\n      }\n\n      node.addEventListener('focusin', handleFocusIn);\n      node.addEventListener('focusout', handleFocusOut);\n    },\n    [handleFocusIn, handleFocusOut]\n  );\n\n  useEffect(\n    () => () => {\n      if (previousNode.current) {\n        previousNode.current.removeEventListener('focusin', handleFocusIn);\n        previousNode.current.removeEventListener('focusout', handleFocusOut);\n      }\n    },\n    []\n  );\n\n  return { ref: callbackRef, focused };\n}\n"],"mappings":";;;AAEA,SAASA,sBAAsBC,KAAmB;EAChD,IAAIA,KAAM,CAAAC,aAAA,YAAyBC,WAAe,IAAAF,KAAA,CAAMG,aAAA,YAAyBD,WAAa;IAC5F,OAAOF,KAAM,CAAAC,aAAA,CAAcG,QAAS,CAAAJ,KAAA,CAAMG,aAAa;EAAA;EAGlD;AACT;AAYO,SAASE,cAA4CA,CAAA;EAC1DC,MAAA;EACAC;AACF,IAA2B,EAAkC;EAC3D,MAAM,CAACC,OAAA,EAASC,UAAU,IAAIC,QAAA,CAAS,KAAK;EACtC,MAAAC,UAAA,GAAaC,MAAA,CAAO,KAAK;EACzB,MAAAC,YAAA,GAAeD,MAAA,CAAiB,IAAI;EAEpC,MAAAE,WAAA,GAAcC,WAAY,CAACC,KAAmB;IAClDP,UAAA,CAAWO,KAAK;IAChBL,UAAA,CAAWM,OAAU,GAAAD,KAAA;EACvB,GAAG,EAAE;EAEL,MAAME,aAAgB,GAAAH,WAAA,CACnBf,KAAsB;IACjB,KAACW,UAAA,CAAWM,OAAS;MACvBH,WAAA,CAAY,IAAI;MAChBP,OAAA,GAAUP,KAAK;IAAA;EAEnB,GACA,CAACO,OAAO,CACV;EAEA,MAAMY,cAAiB,GAAAJ,WAAA,CACpBf,KAAsB;IACrB,IAAIW,UAAW,CAAAM,OAAA,IAAW,CAAClB,qBAAA,CAAsBC,KAAK,CAAG;MACvDc,WAAA,CAAY,KAAK;MACjBR,MAAA,GAASN,KAAK;IAAA;EAElB,GACA,CAACM,MAAM,CACT;EAEA,MAAMc,WAA2C,GAAAL,WAAA,CAC9CM,IAAS;IACR,IAAI,CAACA,IAAM;MACT;IAAA;IAGF,IAAIR,YAAA,CAAaI,OAAS;MACXJ,YAAA,CAAAI,OAAA,CAAQK,mBAAoB,YAAWJ,aAAa;MACpDL,YAAA,CAAAI,OAAA,CAAQK,mBAAoB,aAAYH,cAAc;IAAA;IAGhEE,IAAA,CAAAE,gBAAA,CAAiB,WAAWL,aAAa;IACzCG,IAAA,CAAAE,gBAAA,CAAiB,YAAYJ,cAAc;EAClD,GACA,CAACD,aAAA,EAAeC,cAAc,CAChC;EAEAK,SAAA,CACE,MAAM,MAAM;IACV,IAAIX,YAAA,CAAaI,OAAS;MACXJ,YAAA,CAAAI,OAAA,CAAQK,mBAAoB,YAAWJ,aAAa;MACpDL,YAAA,CAAAI,OAAA,CAAQK,mBAAoB,aAAYH,cAAc;IAAA;EAEvE,GACA,EACF;EAEO;IAAEM,GAAK,EAAAL,WAAA;IAAaZ;EAAQ;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}